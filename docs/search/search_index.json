{
    "docs": [
        {
            "location": "/", 
            "text": "PythonCodes\n\n\nThis project was created and maintained by students and tutors from (1 million arab coders initiative).\n\n\nStudents from 22 arab countries add their python examples and tutorials to make an encyclopedia for Python language.\n\n\nGetting Started\n\n\nThe project is divided into categories , each category contains subcategories and examples for it in three different languages (English , Arabic and French).\n\n\nContributing\n\n\nsee the \nCONTRIBUTING.md\n file for details\n\n\nTo See list of contributors check \nCONTIBUTORS.md\n file for details\n\n\nLicense\n\n\nThis project is licensed under the MIT License - see the \nLICENSE.md\n file for details", 
            "title": "PythonCodes"
        }, 
        {
            "location": "/#pythoncodes", 
            "text": "This project was created and maintained by students and tutors from (1 million arab coders initiative).  Students from 22 arab countries add their python examples and tutorials to make an encyclopedia for Python language.", 
            "title": "PythonCodes"
        }, 
        {
            "location": "/#getting-started", 
            "text": "The project is divided into categories , each category contains subcategories and examples for it in three different languages (English , Arabic and French).", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#contributing", 
            "text": "see the  CONTRIBUTING.md  file for details  To See list of contributors check  CONTIBUTORS.md  file for details", 
            "title": "Contributing"
        }, 
        {
            "location": "/#license", 
            "text": "This project is licensed under the MIT License - see the  LICENSE.md  file for details", 
            "title": "License"
        }, 
        {
            "location": "/Functions/Calculate_Age/", 
            "text": "Calculate_Age\n\n\nCreated by Amr_Aly\nCreation date : 02/07/2018\nIt's a simple function to calculate your age\nThe error that will occur by the date 29/02/1980 or 84 or 88 or 92 or 96 or...etc\nThis error is almost one day you can neglect it\nI think that it's very useful procedure if you use it in\na real project with datetimepicker and textbox\nyour birth date = y1, m1, d1\ncurrent date    = y2, m2, d2\n\n\n    def calculate_age(y1, m1, d1, y2, m2, d2):\n\n        if d2 \n d1:\n            d2 = d2 + 30\n            m2 = m2 - 1\n            if m2 \n m1:\n                m2 = m2 + 12\n                y2 = y2 - 1\n\n        years    = int(y2 - y1)\n        months   = int(m2 - m1)\n        days     = int(d2 - d1) \n        your_age = str(years) + ' Years', str(months) + ' Months', str(days) + ' Days'\n\n        return your_age\n\n\n\nThis date 29/2/1984 as an example its result must be (34 years, 4 months , 2 days)\nBut with this method the result will be(34 years, 4 months , 3 days)\nyou see now that you can neglect it , one day only is the difference\nDon't forget that . It's a simple procedure\n\n\n    print calculate_age(1984,2,29,2018,7,2)", 
            "title": "Calculate_Age"
        }, 
        {
            "location": "/Functions/Calculate_Age/#calculate_age", 
            "text": "Created by Amr_Aly\nCreation date : 02/07/2018\nIt's a simple function to calculate your age\nThe error that will occur by the date 29/02/1980 or 84 or 88 or 92 or 96 or...etc\nThis error is almost one day you can neglect it\nI think that it's very useful procedure if you use it in\na real project with datetimepicker and textbox\nyour birth date = y1, m1, d1\ncurrent date    = y2, m2, d2      def calculate_age(y1, m1, d1, y2, m2, d2):\n\n        if d2   d1:\n            d2 = d2 + 30\n            m2 = m2 - 1\n            if m2   m1:\n                m2 = m2 + 12\n                y2 = y2 - 1\n\n        years    = int(y2 - y1)\n        months   = int(m2 - m1)\n        days     = int(d2 - d1) \n        your_age = str(years) + ' Years', str(months) + ' Months', str(days) + ' Days'\n\n        return your_age  This date 29/2/1984 as an example its result must be (34 years, 4 months , 2 days)\nBut with this method the result will be(34 years, 4 months , 3 days)\nyou see now that you can neglect it , one day only is the difference\nDon't forget that . It's a simple procedure      print calculate_age(1984,2,29,2018,7,2)", 
            "title": "Calculate_Age"
        }, 
        {
            "location": "/Functions/Functions_example_en/", 
            "text": "Functions_example_en\n\n\n    from __future__ import print_function\n\n\n\nSyntax\ndef function_name( parameters ):     ==\nparameters means passing argument to function\nblock of code\nretrun or print\n\n\n    print (\"Example 1\")\n    def names(x):\n        print(x)\n    names(\"dima\")\n    print (\"----------------\")\n\n\n    print (\"Example 2\")\n    def emplpyee_name():\n        name=[\"Sara\",\"Ahmad\",\"Dima\",\"Raed\",\"Wael\"]\n        return name\n    print(emplpyee_name())\n    print (\"----------------\")\n\n    print (\"Example 3\")\n    def sum(x,y):\n        s = x + y\n        return s\n    print(sum(3,4))\n    print (\"----------------\")\n\n    print (\"Example 4\")\n    def sum(x,y=6):\n        s = x + y\n        return s\n    print(sum(3))\n    print (\"----------------\")", 
            "title": "Functions_example_en"
        }, 
        {
            "location": "/Functions/Functions_example_en/#functions_example_en", 
            "text": "from __future__ import print_function  Syntax\ndef function_name( parameters ):     == parameters means passing argument to function\nblock of code\nretrun or print      print (\"Example 1\")\n    def names(x):\n        print(x)\n    names(\"dima\")\n    print (\"----------------\")\n\n\n    print (\"Example 2\")\n    def emplpyee_name():\n        name=[\"Sara\",\"Ahmad\",\"Dima\",\"Raed\",\"Wael\"]\n        return name\n    print(emplpyee_name())\n    print (\"----------------\")\n\n    print (\"Example 3\")\n    def sum(x,y):\n        s = x + y\n        return s\n    print(sum(3,4))\n    print (\"----------------\")\n\n    print (\"Example 4\")\n    def sum(x,y=6):\n        s = x + y\n        return s\n    print(sum(3))\n    print (\"----------------\")", 
            "title": "Functions_example_en"
        }, 
        {
            "location": "/Functions/Game/", 
            "text": "Game\n\n\n    from __future__ import print_function\n\n\n\nExample about function and if .. elif statment\n\n\n    try:\n        raw_input          # Python 2\n    except NameError:\n        raw_input = input  # Python 3\n\n\n    def Game():\n        playerOne_points = 0\n        playerTwo_points = 0\n        while True:\n            print(\"Choose one of this choices: \\n1- Rock \\n2- Paper \\n3- Scissors\")\n            first_player = int(raw_input(\"Player one enter your choice: \").strip())\n            ch_list=[1,2,3]\n            while first_player not in ch_list:\n                print(\"incorrect choice , Try again \")\n                first_player = int(raw_input(\"Player one enter your choice: \").strip())\n            second_player = int(raw_input(\"Player two enter your choice: \").strip())\n            while second_player not in ch_list:\n                print(\"incorrect choice , Try again \")\n                second_player = int(raw_input(\"Player two enter your choice: \").strip())\n\n            if first_player == 1 and second_player == 3:    # Rock breaks scissors\n                playerOne_points += 1\n            elif second_player == 1 and first_player == 3:\n                playerTwo_points += 1\n            elif first_player == 3 and second_player == 2:  # Scissors cuts paper\n                playerOne_points += 1\n            elif second_player == 3 and first_player == 2:\n                playerTwo_points += 1\n            elif first_player == 2 and second_player == 1:  # Paper covers rock\n                playerOne_points += 1\n            elif second_player == 2 and first_player == 1:\n                playerTwo_points += 1\n            if playerOne_points \n playerTwo_points:\n                print(\"Player one won: \" + str(playerOne_points)+ \" VS \"+ str(playerTwo_points))\n            else:\n                print(\"Player two won: \" + str(playerTwo_points)+ \" VS \"+ str(playerOne_points))\n            answer = raw_input(\"Do you want to continue? Y/N \").strip().upper()\n            if answer == \"N\":\n                break\n\n    Game()", 
            "title": "Game"
        }, 
        {
            "location": "/Functions/Game/#game", 
            "text": "from __future__ import print_function  Example about function and if .. elif statment      try:\n        raw_input          # Python 2\n    except NameError:\n        raw_input = input  # Python 3\n\n\n    def Game():\n        playerOne_points = 0\n        playerTwo_points = 0\n        while True:\n            print(\"Choose one of this choices: \\n1- Rock \\n2- Paper \\n3- Scissors\")\n            first_player = int(raw_input(\"Player one enter your choice: \").strip())\n            ch_list=[1,2,3]\n            while first_player not in ch_list:\n                print(\"incorrect choice , Try again \")\n                first_player = int(raw_input(\"Player one enter your choice: \").strip())\n            second_player = int(raw_input(\"Player two enter your choice: \").strip())\n            while second_player not in ch_list:\n                print(\"incorrect choice , Try again \")\n                second_player = int(raw_input(\"Player two enter your choice: \").strip())\n\n            if first_player == 1 and second_player == 3:    # Rock breaks scissors\n                playerOne_points += 1\n            elif second_player == 1 and first_player == 3:\n                playerTwo_points += 1\n            elif first_player == 3 and second_player == 2:  # Scissors cuts paper\n                playerOne_points += 1\n            elif second_player == 3 and first_player == 2:\n                playerTwo_points += 1\n            elif first_player == 2 and second_player == 1:  # Paper covers rock\n                playerOne_points += 1\n            elif second_player == 2 and first_player == 1:\n                playerTwo_points += 1\n            if playerOne_points   playerTwo_points:\n                print(\"Player one won: \" + str(playerOne_points)+ \" VS \"+ str(playerTwo_points))\n            else:\n                print(\"Player two won: \" + str(playerTwo_points)+ \" VS \"+ str(playerOne_points))\n            answer = raw_input(\"Do you want to continue? Y/N \").strip().upper()\n            if answer == \"N\":\n                break\n\n    Game()", 
            "title": "Game"
        }, 
        {
            "location": "/Functions/built-in-functions/", 
            "text": "built-in-functions\n\n\nThis file contains some examples for built-in functions in python\nthey are functions that do certain things \nI will explain \n\n\nexample 1 = .upper()\nadded by @basmalakamal\n\n\n    str1 = \"hello world\"\n    print str1.upper()\n\n\n\nthis how we use it and it is used to return the string with capital letters\n\n\nexample 2 = isupper()\nadded by @basmalakamal\n\n\n    str2 = \"I love coding\"\n    print str2.isupper()\n\n\n\nthis function returns a boolean it is used to see if all letters in the string are capital I have only one capital letter here\nso it returned False\nlets try again here\n\n\n    str3 = \"PYTHON IS AWESOME\"\n    print str3.isupper() #prints True\n\n\n\nexample 3 = lower()\nadded by @basmalakamal\n\n\n    str4 = \"BASMALAH\"\n    print str4.lower()\n\n\n\nit returns the string with small letters\n\n\nexample 4 = islower()\nadded by @basmalakamal\n\n\n    str5 = \"Python\"\n    print str5.islower()\n\n\n\nthis function returns a boolean it is used to see if all letters in the string are small I have one capital letter here\nso it returned False\nlets try again here\n\n\n    str6 = \"python\"\n    print str6.islower() #prints True\n\n\n\nexample 5  = float()\nadded by @basmalakamal\n\n\n    print float('12\\n')\n\n\n\nwe can use this one to input an integer and it will return a float depends on what you have written\nfor example I wrote 12\\n (\\n means a space) so it returned 12.0\n\n\nexample 6 = id()\nadded by @basmalakamal\n\n\n    print id(str6)\n\n\n\nit returns the identity of any object cause every object has an identity in python memory\n\n\nexample 7 = len()\nadded by @basmalakamal\n\n\nexample 8 = int()\nadded by @basmalakamal\n\n\nexample 9 = str()\nadded by @basmalakamal\n\n\nexample 10 = max()\nadded by @basmalakamal\n\n\nexample 11 = sort()\nadded by @basmalakamal\n\n\nexample 12 = replace()\nadded by @basmalakamal\n\n\nexample 13 = append()\nadded by @basmalakamal\n\n\nexample 14 = index()\nadded by @basmalakamal\n\n\nexample 15 = split()\nadded by @basmalakamal\n\n\nexample 16 = join()\nadded by @basmalakamal", 
            "title": "built-in-functions"
        }, 
        {
            "location": "/Functions/built-in-functions/#built-in-functions", 
            "text": "This file contains some examples for built-in functions in python\nthey are functions that do certain things \nI will explain   example 1 = .upper()\nadded by @basmalakamal      str1 = \"hello world\"\n    print str1.upper()  this how we use it and it is used to return the string with capital letters  example 2 = isupper()\nadded by @basmalakamal      str2 = \"I love coding\"\n    print str2.isupper()  this function returns a boolean it is used to see if all letters in the string are capital I have only one capital letter here\nso it returned False\nlets try again here      str3 = \"PYTHON IS AWESOME\"\n    print str3.isupper() #prints True  example 3 = lower()\nadded by @basmalakamal      str4 = \"BASMALAH\"\n    print str4.lower()  it returns the string with small letters  example 4 = islower()\nadded by @basmalakamal      str5 = \"Python\"\n    print str5.islower()  this function returns a boolean it is used to see if all letters in the string are small I have one capital letter here\nso it returned False\nlets try again here      str6 = \"python\"\n    print str6.islower() #prints True  example 5  = float()\nadded by @basmalakamal      print float('12\\n')  we can use this one to input an integer and it will return a float depends on what you have written\nfor example I wrote 12\\n (\\n means a space) so it returned 12.0  example 6 = id()\nadded by @basmalakamal      print id(str6)  it returns the identity of any object cause every object has an identity in python memory  example 7 = len()\nadded by @basmalakamal  example 8 = int()\nadded by @basmalakamal  example 9 = str()\nadded by @basmalakamal  example 10 = max()\nadded by @basmalakamal  example 11 = sort()\nadded by @basmalakamal  example 12 = replace()\nadded by @basmalakamal  example 13 = append()\nadded by @basmalakamal  example 14 = index()\nadded by @basmalakamal  example 15 = split()\nadded by @basmalakamal  example 16 = join()\nadded by @basmalakamal", 
            "title": "built-in-functions"
        }, 
        {
            "location": "/Functions/lambda_en/", 
            "text": "lambda_en\n\n\nwhat is the output of this code?\n\n\n    gun = lambda x:x*x\n    data = 1\n    for i in range(1,3):\n       data+=gun(i)\n    print(gun(data))", 
            "title": "lambda_en"
        }, 
        {
            "location": "/Functions/lambda_en/#lambda_en", 
            "text": "what is the output of this code?      gun = lambda x:x*x\n    data = 1\n    for i in range(1,3):\n       data+=gun(i)\n    print(gun(data))", 
            "title": "lambda_en"
        }, 
        {
            "location": "/Functions/math_functional_en/", 
            "text": "math_functional_en\n\n\n    from math import *\n\n\n\nround\n\n\n    print round(3.99999)\n    print round(66.265626596595, 3)\n\n\n\nabs\n\n\n    print abs(-22)\n\n\n\nmax\n\n\n    print max(10,8,6,33,120)\n\n\n\nmin\n\n\n    print min(10,8,6,33,120)\n\n\n\npow\n\n\n    print pow(6.3 , 1.5)\n\n\n\nsqrt\n\n\n    print sqrt(4)\n\n\n\nceil\n\n\n    print ceil(7.666)\n\n\n\ncopysign\n\n\n    print copysign(1,-1)", 
            "title": "math_functional_en"
        }, 
        {
            "location": "/Functions/math_functional_en/#math_functional_en", 
            "text": "from math import *  round      print round(3.99999)\n    print round(66.265626596595, 3)  abs      print abs(-22)  max      print max(10,8,6,33,120)  min      print min(10,8,6,33,120)  pow      print pow(6.3 , 1.5)  sqrt      print sqrt(4)  ceil      print ceil(7.666)  copysign      print copysign(1,-1)", 
            "title": "math_functional_en"
        }, 
        {
            "location": "/Functions/python_exmple_fibonacci_en/", 
            "text": "python_exmple_fibonacci_en\n\n\nthis file print out the fibonacci of the function input\n\n\nimporting numpy for execute math with lists\n\n\n    import numpy as np\n\n\n\ndefine the function that takes one input\n\n\n    def fibonacci_cube(num):\n        #define a list that contains 0 and 1 , because the fibonacci always starts with 0 and 1\n        lis = [0,1]\n        #this for loop takes the range of the parameter and 2\n        for i in range(2,num):\n            #appending the sum of the previuos two numbers to the list\n            lis.append(lis[i-2] + lis[i-1])\n        #finally returning the cube of the fibonacci content\n        return np.array(lis)**3\n\n\n\ncalling the function with 8 as an example\n\n\n    print fibonacci_cube(8)", 
            "title": "python_exmple_fibonacci_en"
        }, 
        {
            "location": "/Functions/python_exmple_fibonacci_en/#python_exmple_fibonacci_en", 
            "text": "this file print out the fibonacci of the function input  importing numpy for execute math with lists      import numpy as np  define the function that takes one input      def fibonacci_cube(num):\n        #define a list that contains 0 and 1 , because the fibonacci always starts with 0 and 1\n        lis = [0,1]\n        #this for loop takes the range of the parameter and 2\n        for i in range(2,num):\n            #appending the sum of the previuos two numbers to the list\n            lis.append(lis[i-2] + lis[i-1])\n        #finally returning the cube of the fibonacci content\n        return np.array(lis)**3  calling the function with 8 as an example      print fibonacci_cube(8)", 
            "title": "python_exmple_fibonacci_en"
        }, 
        {
            "location": "/Functions/revirse_string_en/", 
            "text": "revirse_string_en\n\n\nadded by @Azharoo\nPython 3\n\n\n    def revirse_string(word):\n        s=\"\"\n        word= word.split()\n        for e in word:\n            s+= e[::-1] + \" \"\n        print s\n\n\n    word=\"Welcome to pythonCodes on GitHub\"\n\n    revirse_string(word)", 
            "title": "revirse_string_en"
        }, 
        {
            "location": "/Functions/revirse_string_en/#revirse_string_en", 
            "text": "added by @Azharoo\nPython 3      def revirse_string(word):\n        s=\"\"\n        word= word.split()\n        for e in word:\n            s+= e[::-1] + \" \"\n        print s\n\n\n    word=\"Welcome to pythonCodes on GitHub\"\n\n    revirse_string(word)", 
            "title": "revirse_string_en"
        }, 
        {
            "location": "/Functions/strip_en/", 
            "text": "strip_en\n\n\nstrip() returns a copy of the string\nin which all chars have been stripped\nfrom the beginning and the end of the string\n\n\nlstrip() removes leading characters (Left-strip)\nrstrip() removes trailing characters (Right-strip)\n\n\nSyntax\nstr.strip([chars]);\n\n\nExample 1\nprint Python a high level\n\n\n    str = \"Python a high level language\";\n    print str.strip( 'language' )\n\n\n\nExamlpe 2\n\n\n    str = \"Python a high level language , Python\")\n\n\n\nprint a high level language ,\n\n\n    print str.strip(\"Python\")\n\n\n\nprint a high level language , Python\n\n\n    print str.lstrip(\"Python\")\n\n\n\nprint Python a high level language ,\n\n\n    print str.rstrip(\"Python\")", 
            "title": "strip_en"
        }, 
        {
            "location": "/Functions/strip_en/#strip_en", 
            "text": "strip() returns a copy of the string\nin which all chars have been stripped\nfrom the beginning and the end of the string  lstrip() removes leading characters (Left-strip)\nrstrip() removes trailing characters (Right-strip)  Syntax\nstr.strip([chars]);  Example 1\nprint Python a high level      str = \"Python a high level language\";\n    print str.strip( 'language' )  Examlpe 2      str = \"Python a high level language , Python\")  print a high level language ,      print str.strip(\"Python\")  print a high level language , Python      print str.lstrip(\"Python\")  print Python a high level language ,      print str.rstrip(\"Python\")", 
            "title": "strip_en"
        }, 
        {
            "location": "/Lists/Dictionary_ex_en/", 
            "text": "Dictionary_ex_en\n\n\nadded by @Dima\n\n\n    EmployeeName = {\"Dima\":\"2000\",\n                    \"Marwa\":\"4000\",\n                    \"Sarah\":\"2500\"}\n\n    print(EmployeeName)\n\n    print len(EmployeeName)\n\n\n    EmployeeName[\"Dima\"] = 5000\n    print(EmployeeName)", 
            "title": "Dictionary_ex_en"
        }, 
        {
            "location": "/Lists/Dictionary_ex_en/#dictionary_ex_en", 
            "text": "added by @Dima      EmployeeName = {\"Dima\":\"2000\",\n                    \"Marwa\":\"4000\",\n                    \"Sarah\":\"2500\"}\n\n    print(EmployeeName)\n\n    print len(EmployeeName)\n\n\n    EmployeeName[\"Dima\"] = 5000\n    print(EmployeeName)", 
            "title": "Dictionary_ex_en"
        }, 
        {
            "location": "/Lists/Sets_ex_en/", 
            "text": "Sets_ex_en\n\n\nadded by @Dima\nEmpty\n\n\n    x = {}\n    print(x)\n\n\n\nprint ('Dima', 'Marwa', 'Sarah')\n\n\n    EmployeeName = {\"Dima\", \"Marwa\", \"Sarah\"}\n    print(EmployeeName)\n\n\n\nprint length = 3\n\n\n    print len(EmployeeName)\n\n\n\nprint Sarah\nprint EmployeeName[2] this will give an error because the set has unindex\n\n\nremove marwa\n\n\n    EmployeeName.remove(\"Marwa\")\n    print EmployeeName", 
            "title": "Sets_ex_en"
        }, 
        {
            "location": "/Lists/Sets_ex_en/#sets_ex_en", 
            "text": "added by @Dima\nEmpty      x = {}\n    print(x)  print ('Dima', 'Marwa', 'Sarah')      EmployeeName = {\"Dima\", \"Marwa\", \"Sarah\"}\n    print(EmployeeName)  print length = 3      print len(EmployeeName)  print Sarah\nprint EmployeeName[2] this will give an error because the set has unindex  remove marwa      EmployeeName.remove(\"Marwa\")\n    print EmployeeName", 
            "title": "Sets_ex_en"
        }, 
        {
            "location": "/Lists/Slicing_en/", 
            "text": "Slicing_en\n\n\nadded by @Azharoo\nPython 3\nPython slicing is a computationally fast way to methodically access parts of your data.\n\n\nCreate a list of science subjects and another list of integers from 1-10\n\n\n    subjects = ['IT-Science','physics','biology','mathematics']\n    x=list(range(1,11))\n\n\n\nslicing the entire list.\n\n\n    subjects[:]\n    ['IT-Science', 'physics', 'biology', 'mathematics']\n    x[:]\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\n\nSlicing from index 0 up to the last index with a step size of 2.\n\n\n    subjects[::2]\n    ['IT-Science', 'biology']\n    x[::2]\n    [1, 3, 5, 7, 9]\n\n\n\nSlicing from index 9 down to the last index with a negative step size of 2.\n\n\n    x[9:0:-2]\n    [10, 8, 6, 4, 2]\n    \"\"\"Slicing from last index from the right of the list \n    down to the last index of the left of the list with a\n    negative step size of 3.\"\"\"\n    x[::-3]\n    [10, 7, 4, 1]", 
            "title": "Slicing_en"
        }, 
        {
            "location": "/Lists/Slicing_en/#slicing_en", 
            "text": "added by @Azharoo\nPython 3\nPython slicing is a computationally fast way to methodically access parts of your data.  Create a list of science subjects and another list of integers from 1-10      subjects = ['IT-Science','physics','biology','mathematics']\n    x=list(range(1,11))  slicing the entire list.      subjects[:]\n    ['IT-Science', 'physics', 'biology', 'mathematics']\n    x[:]\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  Slicing from index 0 up to the last index with a step size of 2.      subjects[::2]\n    ['IT-Science', 'biology']\n    x[::2]\n    [1, 3, 5, 7, 9]  Slicing from index 9 down to the last index with a negative step size of 2.      x[9:0:-2]\n    [10, 8, 6, 4, 2]\n    \"\"\"Slicing from last index from the right of the list \n    down to the last index of the left of the list with a\n    negative step size of 3.\"\"\"\n    x[::-3]\n    [10, 7, 4, 1]", 
            "title": "Slicing_en"
        }, 
        {
            "location": "/Lists/Tuple_ex_en/", 
            "text": "Tuple_ex_en\n\n\nadded by @Dima\nEmpty\n\n\n    x = ()\n    print(x)\n\n\n\nprint ('Dima', 'Marwa', 'Sarah')\n\n\n    EmployeeName = (\"Dima\", \"Marwa\", \"Sarah\")\n    print(EmployeeName)\n\n\n\nprint length = 3\n\n\n    print len(EmployeeName)\n\n\n\nprint Sarah\n\n\n    print EmployeeName[2]", 
            "title": "Tuple_ex_en"
        }, 
        {
            "location": "/Lists/Tuple_ex_en/#tuple_ex_en", 
            "text": "added by @Dima\nEmpty      x = ()\n    print(x)  print ('Dima', 'Marwa', 'Sarah')      EmployeeName = (\"Dima\", \"Marwa\", \"Sarah\")\n    print(EmployeeName)  print length = 3      print len(EmployeeName)  print Sarah      print EmployeeName[2]", 
            "title": "Tuple_ex_en"
        }, 
        {
            "location": "/Lists/comprehensions_en/", 
            "text": "comprehensions_en\n\n\nAdded by @ammarasmro\n\n\nComprehensions are very convenient one-liners that allow a user to from a\nwhole list or a dictionary easily\n\n\nOne of the biggest benefits for comprehensions is that they are faster than\na for-loop. As they allocate the necessary memory instead of appending an\nelement with each cycle and reallocate more resources in case it needs them\n\n\n    sample_list = [x for x in range(5)]\n    print(sample_list)\n\n\n\n\n\n\n\n\n\n[0,1,2,3,4]\n\n\n\n\n\n\n\n\nOr to perform a task while iterating through items\n\n\n    original_list = ['1', '2', '3'] # string representations of numbers\n    new_integer_list = [int(x) for x in original_list]\n\n\n\nA similar concept can be applied to the dictionaries\n\n\n    sample_dictionary =  {x: str(x) + '!' for x in range(3) }\n    print(sample_dictionary)\n\n\n\n\n\n\n\n\n\n{0: '0!', 1: '1!', 2: '2!'}\n\n\n\n\n\n\n\n\nConditional statements can be used to preprocess data before including them\nin a list\n\n\n    list_of_even_numbers = [x for x in range(20) if x % 2 == 0 ]\n    print(list_of_even_numbers)\n\n\n\n\n\n\n\n\n\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]", 
            "title": "comprehensions_en"
        }, 
        {
            "location": "/Lists/comprehensions_en/#comprehensions_en", 
            "text": "Added by @ammarasmro  Comprehensions are very convenient one-liners that allow a user to from a\nwhole list or a dictionary easily  One of the biggest benefits for comprehensions is that they are faster than\na for-loop. As they allocate the necessary memory instead of appending an\nelement with each cycle and reallocate more resources in case it needs them      sample_list = [x for x in range(5)]\n    print(sample_list)     [0,1,2,3,4]     Or to perform a task while iterating through items      original_list = ['1', '2', '3'] # string representations of numbers\n    new_integer_list = [int(x) for x in original_list]  A similar concept can be applied to the dictionaries      sample_dictionary =  {x: str(x) + '!' for x in range(3) }\n    print(sample_dictionary)     {0: '0!', 1: '1!', 2: '2!'}     Conditional statements can be used to preprocess data before including them\nin a list      list_of_even_numbers = [x for x in range(20) if x % 2 == 0 ]\n    print(list_of_even_numbers)     [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]", 
            "title": "comprehensions_en"
        }, 
        {
            "location": "/Lists/example/", 
            "text": "example\n\n\n    string=\"ali ahmed salm\"\n    print (string.find(\"sa\"))\n    print (string.find(\"\"))\n    print (string.find (\" \"))\n    print (string.find(\"ah\",3,5))\n    print (string.find(\"ah\",3,6))\n    def get_s(a, b):\n      return a[:b]\n    print(get_s(\"mySchool\",10))", 
            "title": "example"
        }, 
        {
            "location": "/Lists/example/#example", 
            "text": "string=\"ali ahmed salm\"\n    print (string.find(\"sa\"))\n    print (string.find(\"\"))\n    print (string.find (\" \"))\n    print (string.find(\"ah\",3,5))\n    print (string.find(\"ah\",3,6))\n    def get_s(a, b):\n      return a[:b]\n    print(get_s(\"mySchool\",10))", 
            "title": "example"
        }, 
        {
            "location": "/Lists/list_example_ar/", 
            "text": "list_example_ar\n\n\nThis file contains some examples for Python Lists\nHow to create lists\nhow to print lists\n\n\nexample 1\nadded by @engshorouq\nempty list\n\n\n    my_list=[]\n\n\n\nlist of integers\n\n\n    my_list=[1,2,3,4,5]\n\n\n\nlist with mixed datatype\n\n\n    my_list=[2,\"python\",2.2]\n\n\n\nexample 2\nadded by @engshorouq\nto print specific index\n\n\n    my_list=['p','y','t','h','o','n']\n    print(\"first index in the list in positive index : \",my_list[0])\n    print(\"first index in the list in negative index : \",my_list[-5])\n\n\n\nto print a range of items in the lists\n\n\n    print(\"from beginning element to end : \",my_list[:])\n    print(\"from the second element to fifth element : \",my_list[1:4])\n    print(\"from beginning to the second : \",my_list[:-5])\n    print(\"from second to end element : \",my_list[1:])", 
            "title": "list_example_ar"
        }, 
        {
            "location": "/Lists/list_example_ar/#list_example_ar", 
            "text": "This file contains some examples for Python Lists\nHow to create lists\nhow to print lists  example 1\nadded by @engshorouq\nempty list      my_list=[]  list of integers      my_list=[1,2,3,4,5]  list with mixed datatype      my_list=[2,\"python\",2.2]  example 2\nadded by @engshorouq\nto print specific index      my_list=['p','y','t','h','o','n']\n    print(\"first index in the list in positive index : \",my_list[0])\n    print(\"first index in the list in negative index : \",my_list[-5])  to print a range of items in the lists      print(\"from beginning element to end : \",my_list[:])\n    print(\"from the second element to fifth element : \",my_list[1:4])\n    print(\"from beginning to the second : \",my_list[:-5])\n    print(\"from second to end element : \",my_list[1:])", 
            "title": "list_example_ar"
        }, 
        {
            "location": "/Lists/list_example_en/", 
            "text": "list_example_en\n\n\nThis file contains some examples for Python Lists\nHow to create lists\nhow to print lists\n\n\nexample 1\nadded by @engshorouq\nempty list\n\n\n    my_list=[]\n\n\n\nexample 2\nadded by anonymous\ndefine a list with numbers from 1-5\n\n\n    my_list=[1,2,3,4,5]\n\n\n\nexample 3\nadded by anonymous\nlist with mixed datatype\n\n\n    my_list=[2,\"python\",2.2]\n\n\n\nexample 4\nadded by @engshorouq\nprint specific index\n\n\n    my_list=['p','y','t','h','o','n']\n    print(\"first index in the list in positive index : \",my_list[0])\n    print(\"first index in the list in negative index : \",my_list[-5])\n\n\n\nto print a range of items in the lists\n\n\n    print(\"from beginning element to end : \",my_list[:])\n    print(\"from the second element to fifth element : \",my_list[1:4])\n    print(\"from beginning to the second : \",my_list[:-5])\n    print(\"from second to end element : \",my_list[1:])", 
            "title": "list_example_en"
        }, 
        {
            "location": "/Lists/list_example_en/#list_example_en", 
            "text": "This file contains some examples for Python Lists\nHow to create lists\nhow to print lists  example 1\nadded by @engshorouq\nempty list      my_list=[]  example 2\nadded by anonymous\ndefine a list with numbers from 1-5      my_list=[1,2,3,4,5]  example 3\nadded by anonymous\nlist with mixed datatype      my_list=[2,\"python\",2.2]  example 4\nadded by @engshorouq\nprint specific index      my_list=['p','y','t','h','o','n']\n    print(\"first index in the list in positive index : \",my_list[0])\n    print(\"first index in the list in negative index : \",my_list[-5])  to print a range of items in the lists      print(\"from beginning element to end : \",my_list[:])\n    print(\"from the second element to fifth element : \",my_list[1:4])\n    print(\"from beginning to the second : \",my_list[:-5])\n    print(\"from second to end element : \",my_list[1:])", 
            "title": "list_example_en"
        }, 
        {
            "location": "/Lists/list_example_fr/", 
            "text": "list_example_fr", 
            "title": "list_example_fr"
        }, 
        {
            "location": "/Lists/list_example_fr/#list_example_fr", 
            "text": "", 
            "title": "list_example_fr"
        }, 
        {
            "location": "/Lists/modify_add_lists/", 
            "text": "modify_add_lists\n\n\nhow to add element to lists\nhow to modify elements in the lists\n\n\nexample1\nadded by @engshorouq\ncreate empty list\n\n\n    my_list=[]\n\n\n\nadd element to empty string in two ways the first way(append)\n\n\n    my_list.append(\"Learn\")\n    my_list.append([\"Pythn\",\"Language\"])\n\n\n\nprint list to show the output\n\n\n    print(\"list after adding iteam using append : \\n\",my_list)\n\n\n\nadd element to my list by second way : using + operator\n\n\n    my_list=my_list+[\"version\"]\n    my_list=my_list+[3]\n    my_list=my_list+[\"interting\",\"language\"]\n\n\n\nprint list to show output\n\n\n    print(\"\\nlist after adding iteam using append : \\n\",my_list)\n\n\n\nmistake in writing word inside list\nmodify 1st iteam\n\n\n    my_list[0]=\"Learning\"\n\n\n\nmodify 2nd item the 1st item inside it\n\n\n    my_list[1][0]=\"Python\"\n\n\n\nmodify 3rd to 5th item\n\n\n    my_list[2:5]=[\"version 3\",\"intersting\",\"language\"]\n\n\n\nprint list to show output\n\n\n    print(\"\\nlist after modification : \\n\",my_list)", 
            "title": "modify_add_lists"
        }, 
        {
            "location": "/Lists/modify_add_lists/#modify_add_lists", 
            "text": "how to add element to lists\nhow to modify elements in the lists  example1\nadded by @engshorouq\ncreate empty list      my_list=[]  add element to empty string in two ways the first way(append)      my_list.append(\"Learn\")\n    my_list.append([\"Pythn\",\"Language\"])  print list to show the output      print(\"list after adding iteam using append : \\n\",my_list)  add element to my list by second way : using + operator      my_list=my_list+[\"version\"]\n    my_list=my_list+[3]\n    my_list=my_list+[\"interting\",\"language\"]  print list to show output      print(\"\\nlist after adding iteam using append : \\n\",my_list)  mistake in writing word inside list\nmodify 1st iteam      my_list[0]=\"Learning\"  modify 2nd item the 1st item inside it      my_list[1][0]=\"Python\"  modify 3rd to 5th item      my_list[2:5]=[\"version 3\",\"intersting\",\"language\"]  print list to show output      print(\"\\nlist after modification : \\n\",my_list)", 
            "title": "modify_add_lists"
        }, 
        {
            "location": "/Lists/pop/", 
            "text": "pop\n\n\n\u0627\u0644\u062f\u0627\u0644\u0629 pop() \u062a\u0642\u0648\u0645 \u0628\u062d\u0630\u0641 \u0627\u062e\u0631 \u0639\u0646\u0635\u0631 \u0628\u0627\u0644\u0642\u0627\u0626\u0645\u0629\n\u0646\u0633\u062a\u0637\u064a\u0639 \u0627\u0646 \u0646\u062d\u062f\u062f \u0627\u0644\u0639\u0646\u0635\u0631 \u0627\u0644\u0645\u0631\u0627\u062f \u062d\u0630\u0641\u0647 \u0648\u0630\u0644\u0643 \u0628\u062a\u062d\u062f\u064a\u062f \u0627\u0646\u062f\u0643\u0633 \u0627\u0644\u0639\u0646\u0635\u0631 \u0628\u062f\u0627\u062e\u0644 \u0627\u0644\u0642\u0648\u0633\u064a\u0646\n\n\n\u0627\u0644\u0645\u062b\u0627\u0644 \u0627\u0644\u0627\u0648\u0644\n\n\n    li = [2,3,4,5]\n    li.pop()\n    print li    #[\u064a\u0637\u0628\u0639 [2,3,4\n\n\n\n\u0627\u0644\u0645\u062b\u0627\u0644 \u0627\u0644\u062b\u0627\u0646\u064a\n\n\n    li = [2,3,4,5]\n    li.pop(2)\n    print li    #[\u064a\u0637\u0628\u0639 [2,3,5\n\n\n\n\u0627\u0644\u062f\u0627\u0644\u0629 pop \u0644\u0647\u0627 \u0642\u064a\u0645\u0629 \u0627\u0631\u062c\u0627\u0639 \u0648\u0647\u064a \u0627\u0644\u0639\u0646\u0635\u0631 \u0627\u0644\u0645\u062d\u0630\u0648\u0641\n\n\n    li = [2,3,4,5]\n    print li.pop()  # \u064a\u0637\u0628\u0639 5", 
            "title": "pop"
        }, 
        {
            "location": "/Lists/pop/#pop", 
            "text": "\u0627\u0644\u062f\u0627\u0644\u0629 pop() \u062a\u0642\u0648\u0645 \u0628\u062d\u0630\u0641 \u0627\u062e\u0631 \u0639\u0646\u0635\u0631 \u0628\u0627\u0644\u0642\u0627\u0626\u0645\u0629\n\u0646\u0633\u062a\u0637\u064a\u0639 \u0627\u0646 \u0646\u062d\u062f\u062f \u0627\u0644\u0639\u0646\u0635\u0631 \u0627\u0644\u0645\u0631\u0627\u062f \u062d\u0630\u0641\u0647 \u0648\u0630\u0644\u0643 \u0628\u062a\u062d\u062f\u064a\u062f \u0627\u0646\u062f\u0643\u0633 \u0627\u0644\u0639\u0646\u0635\u0631 \u0628\u062f\u0627\u062e\u0644 \u0627\u0644\u0642\u0648\u0633\u064a\u0646  \u0627\u0644\u0645\u062b\u0627\u0644 \u0627\u0644\u0627\u0648\u0644      li = [2,3,4,5]\n    li.pop()\n    print li    #[\u064a\u0637\u0628\u0639 [2,3,4  \u0627\u0644\u0645\u062b\u0627\u0644 \u0627\u0644\u062b\u0627\u0646\u064a      li = [2,3,4,5]\n    li.pop(2)\n    print li    #[\u064a\u0637\u0628\u0639 [2,3,5  \u0627\u0644\u062f\u0627\u0644\u0629 pop \u0644\u0647\u0627 \u0642\u064a\u0645\u0629 \u0627\u0631\u062c\u0627\u0639 \u0648\u0647\u064a \u0627\u0644\u0639\u0646\u0635\u0631 \u0627\u0644\u0645\u062d\u0630\u0648\u0641      li = [2,3,4,5]\n    print li.pop()  # \u064a\u0637\u0628\u0639 5", 
            "title": "pop"
        }, 
        {
            "location": "/Lists/List_Methods/pop_en/", 
            "text": "pop_en\n\n\nadded by @Azharoo\nPython 3\n\n\nThe pop() method removes and returns the element at the given index (passed as an argument) from the list.\nIf no parameter is passed, the default index -1 is passed as an argument which returns the last element.\n\n\nExample 1: Print Element Present at the Given Index from the List\n\n\nprogramming language list\n\n\n    language = ['Python', 'Php', 'C++', 'Oracle', 'Ruby']\n\n\n\nReturn value from pop() When 3 is passed\n\n\n    print('When 3 is passed:') \n    return_value = language.pop(3)\n    print('Return Value: ', return_value)\n\n\n\nUpdated List\n\n\n    print('Updated List: ', language)\n\n\n\nExample 2: pop() when index is not passed and for negative index\n\n\nprogramming language list\n\n\n    language = ['Python', 'Php', 'C++', 'Oracle', 'Ruby']\n\n\n\nWhen index is not passed\n\n\n    print('\\nWhen index is not passed:') \n    print('Return Value: ', language.pop())\n    print('Updated List: ', language)\n\n\n\nWhen -1 is passed Pops Last Element\n\n\n    print('\\nWhen -1 is passed:') \n    print('Return Value: ', language.pop(-1))\n    print('Updated List: ', language)\n\n\n\nWhen -3 is passed Pops Third Last Element\n\n\n    print('\\nWhen -3 is passed:') \n    print('Return Value: ', language.pop(-3))\n    print('Updated List: ', language)", 
            "title": "pop_en"
        }, 
        {
            "location": "/Lists/List_Methods/pop_en/#pop_en", 
            "text": "added by @Azharoo\nPython 3  The pop() method removes and returns the element at the given index (passed as an argument) from the list.\nIf no parameter is passed, the default index -1 is passed as an argument which returns the last element.  Example 1: Print Element Present at the Given Index from the List  programming language list      language = ['Python', 'Php', 'C++', 'Oracle', 'Ruby']  Return value from pop() When 3 is passed      print('When 3 is passed:') \n    return_value = language.pop(3)\n    print('Return Value: ', return_value)  Updated List      print('Updated List: ', language)  Example 2: pop() when index is not passed and for negative index  programming language list      language = ['Python', 'Php', 'C++', 'Oracle', 'Ruby']  When index is not passed      print('\\nWhen index is not passed:') \n    print('Return Value: ', language.pop())\n    print('Updated List: ', language)  When -1 is passed Pops Last Element      print('\\nWhen -1 is passed:') \n    print('Return Value: ', language.pop(-1))\n    print('Updated List: ', language)  When -3 is passed Pops Third Last Element      print('\\nWhen -3 is passed:') \n    print('Return Value: ', language.pop(-3))\n    print('Updated List: ', language)", 
            "title": "pop_en"
        }, 
        {
            "location": "/Lists/List_Methods/remove_en/", 
            "text": "remove_en\n\n\nadded by @Azharoo\nPython 3\n\n\nThe remove() method searches for the given element in the list and removes the first matching element.\nIf the element(argument) passed to the remove() method doesn't exist, valueError exception is thrown.\n\n\nExample 1: Remove Element From The List\nanimal list\n\n\n    animal = ['cat', 'dog', 'rabbit', 'cow']\n\n\n\n'rabbit' element is removed\n\n\n    animal.remove('rabbit')\n\n\n\nUpdated Animal List\n\n\n    print('Updated animal list: ', animal)\n\n\n\nExample 2: remove() Method on a List having Duplicate Elements\nIf a list contains duplicate elements, the remove() method removes only the first instance\n\n\nanimal list\n\n\n    animal = ['cat', 'dog', 'dog', 'cow', 'dog']\n\n\n\n'dog' element is removed\n\n\n    animal.remove('dog')\n\n\n\nUpdated Animal List\n\n\n    print('Updated animal list: ', animal)\n\n\n\nExample 3: Trying to Delete Element That Doesn't Exist \nWhen you run the program, you will get the following error: \nValueError: list.remove(x): x not in list\n\n\nanimal list\n\n\n    animal = ['cat', 'dog', 'rabbit', 'cow']\n\n\n\nDeleting 'fish' element\n\n\n    animal.remove('fish')\n\n\n\nUpdated Animal List\n\n\n    print('Updated animal list: ', animal)", 
            "title": "remove_en"
        }, 
        {
            "location": "/Lists/List_Methods/remove_en/#remove_en", 
            "text": "added by @Azharoo\nPython 3  The remove() method searches for the given element in the list and removes the first matching element.\nIf the element(argument) passed to the remove() method doesn't exist, valueError exception is thrown.  Example 1: Remove Element From The List\nanimal list      animal = ['cat', 'dog', 'rabbit', 'cow']  'rabbit' element is removed      animal.remove('rabbit')  Updated Animal List      print('Updated animal list: ', animal)  Example 2: remove() Method on a List having Duplicate Elements\nIf a list contains duplicate elements, the remove() method removes only the first instance  animal list      animal = ['cat', 'dog', 'dog', 'cow', 'dog']  'dog' element is removed      animal.remove('dog')  Updated Animal List      print('Updated animal list: ', animal)  Example 3: Trying to Delete Element That Doesn't Exist \nWhen you run the program, you will get the following error: \nValueError: list.remove(x): x not in list  animal list      animal = ['cat', 'dog', 'rabbit', 'cow']  Deleting 'fish' element      animal.remove('fish')  Updated Animal List      print('Updated animal list: ', animal)", 
            "title": "remove_en"
        }, 
        {
            "location": "/Lists/List_Methods/reverse_ar/", 
            "text": "reverse_ar\n\n\nadded by @Azharoo\nPython 3\n\n\nThe reverse() \u064a\u0639\u0643\u0633 \u0639\u0646\u0627\u0635\u0631 \u0642\u0627\u0626\u0645\u0629 \u0645\u062d\u062f\u062f\u0629.\nThe reverse() \u0644\u0627 \u062a\u0623\u062e\u0630 \u0623\u064a \u0639\u0648\u0627\u0645\u0644.\nThe reverse() \u0644\u0627 \u064a\u0639\u064a\u062f \u0623\u064a \u0642\u064a\u0645\u0629. \u064a\u0642\u0648\u0645 \u0641\u0642\u0637 \u0639\u0643\u0633 \u0627\u0644\u0639\u0646\u0627\u0635\u0631 \u0648\u062a\u062d\u062f\u064a\u062b \u0627\u0644\u0642\u0627\u0626\u0645\u0629.\n\n\n\u0645\u062b\u0627\u0644 1 : Reverse a List\n\n\nOperating System List\n\n\n    os = ['Windows', 'macOS', 'Linux']\n    print('Original List:', os)\n\n\n\nList Reverse\n\n\n    os.reverse()\n\n\n\nupdated list\n\n\n    print('Updated List:', os)\n\n\n\nExample 2: Reverse a List Using Slicing Operator\n\n\nOperating System List\n\n\n    os = ['Windows', 'macOS', 'Linux']\n    print('Original List:', os)\n\n\n\nReversing a list\nSyntax: reversed_list = os[start:stop:step]\n\n\n    reversed_list = os[::-1]\n\n\n\nupdated list\n\n\n    print('Updated List:', reversed_list)\n\n\n\nExample 3: Accessing Individual Elements in Reversed Order\n\n\nOperating System List\n\n\n    os = ['Windows', 'macOS', 'Linux']\n\n\n\n\u0637\u0628\u0627\u0639\u0629 \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u0628\u0634\u0643\u0644 \u0645\u0639\u0643\u0648\u0633\n\n\n    for o in reversed(os):\n        print(o)\n\n\n\n\u0645\u062b\u0627\u0644 4 : (\u0634\u0631\u062d \u0627\u0644\u0627\u0633\u062a\u0627\u0630 \u0627\u0644\u0641\u0627\u0636\u0644 \u0631\u064a\u0645\u0648\u0646 )\n\n\n    def my_f(list):\n      list1 = list.reverse() \n      return list1\n\n    list =[10,20,40]\n\n    print(my_f(list)) ## \u0627\u0644\u0646\u0627\u062a\u062c \u0647\u0646\u0627 None\n\n\n\n    def my_f(list):\n      list1 = list.reverse() \n      return list\n\n    list =[10,20,40]\n\n    print(my_f(list))## [40, 20, 10]\n\n\n\n\u0644\u0645\u0627\u0630\u0627 \u0627\u0644\u0646\u0627\u062a\u062c\u064a\u0646 \u0645\u062e\u062a\u0644\u0641\u064a\u0646\n\n\n\u0628\u0628\u0633\u0627\u0637\u0629\n\n\n\u0641\u0649 \u0627\u0644\u0645\u0631\u0629 \u0627\u0644\u0627\u0648\u0644\u0649\n\n\nreverse()\n\u0647\u0649 \u0642\u0627\u0645\u062a \u0628\u0627\u0644\u062a\u0639\u062f\u064a\u0644 \u0639\u0644\u0649 \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u0644\u0643\u0646 \u0644\u0627\u062a\u0642\u0648\u0645 \u0628\u0627\u062e\u0631\u0627\u062c \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u062c\u062f\u064a\u062f\u0629\n\n\n\u0644\u0643\u0646 \u062a\u0645 \u0627\u0644\u062a\u0639\u062f\u064a\u0644 \u0628\u0627\u0644\u0641\u0639\u0644 \u0639\u0644\u0649 \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u0648\u0627\u0630\u0627 \u062a\u0645\u062a \u0637\u0628\u0627\u0639\u0629 \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u0646\u062c\u062f \u0627\u0646\n\n\n\u0642\u064a\u0645 \u0627\u0644\u0639\u0646\u0627\u0635\u0631 \u0642\u062f \u0627\u0646\u0642\u0644\u0628\u062a \u0628\u0627\u0644\u0639\u0643\u0633\n\n\n\u0648\u0647\u0648 \u0645\u0627\u062d\u062f\u062b \u0641\u0649 \u0627\u0644\u0643\u0648\u062f \u0627\u0644\u062d\u0627\u0644\u0649 \u0639\u0646\u062f\u0645\u0627 \u0642\u0645\u0646\u0627 \u0628\u0627\u0631\u062c\u0627\u0639 \u0642\u064a\u0645\u0629 \u0627\u0644\u0642\u0627\u0626\u0645\u0629\n\n\n\u0648\u062a\u0645\u062a \u0637\u0628\u0627\u0639\u0629 \u0627\u0644\u0642\u064a\u0645\u0629 \u0628\u0627\u0644\u0641\u0639\u0644\n\n\n\u0628\u064a\u0646\u0645\u0627 \u0641\u0649 \u0627\u0644\u0645\u0631\u0629 \u0627\u0644\u0627\u0648\u0644\u0649 \u2026 \u0645\u0627 \u0637\u0644\u0628\u0646\u0627 \u0627\u062e\u0631\u0627\u062c\u0647 \u0647\u0648 \u0627\u0644\u0639\u0645\u0644\u064a\u0629 \u0646\u0641\u0633\u0647\u0627 \u2026 \u0648\u0644\u064a\u0633\u062a \u0627\u0644\u0642\u064a\u0645\u0629", 
            "title": "reverse_ar"
        }, 
        {
            "location": "/Lists/List_Methods/reverse_ar/#reverse_ar", 
            "text": "added by @Azharoo\nPython 3  The reverse() \u064a\u0639\u0643\u0633 \u0639\u0646\u0627\u0635\u0631 \u0642\u0627\u0626\u0645\u0629 \u0645\u062d\u062f\u062f\u0629.\nThe reverse() \u0644\u0627 \u062a\u0623\u062e\u0630 \u0623\u064a \u0639\u0648\u0627\u0645\u0644.\nThe reverse() \u0644\u0627 \u064a\u0639\u064a\u062f \u0623\u064a \u0642\u064a\u0645\u0629. \u064a\u0642\u0648\u0645 \u0641\u0642\u0637 \u0639\u0643\u0633 \u0627\u0644\u0639\u0646\u0627\u0635\u0631 \u0648\u062a\u062d\u062f\u064a\u062b \u0627\u0644\u0642\u0627\u0626\u0645\u0629.  \u0645\u062b\u0627\u0644 1 : Reverse a List  Operating System List      os = ['Windows', 'macOS', 'Linux']\n    print('Original List:', os)  List Reverse      os.reverse()  updated list      print('Updated List:', os)  Example 2: Reverse a List Using Slicing Operator  Operating System List      os = ['Windows', 'macOS', 'Linux']\n    print('Original List:', os)  Reversing a list\nSyntax: reversed_list = os[start:stop:step]      reversed_list = os[::-1]  updated list      print('Updated List:', reversed_list)  Example 3: Accessing Individual Elements in Reversed Order  Operating System List      os = ['Windows', 'macOS', 'Linux']  \u0637\u0628\u0627\u0639\u0629 \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u0628\u0634\u0643\u0644 \u0645\u0639\u0643\u0648\u0633      for o in reversed(os):\n        print(o)  \u0645\u062b\u0627\u0644 4 : (\u0634\u0631\u062d \u0627\u0644\u0627\u0633\u062a\u0627\u0630 \u0627\u0644\u0641\u0627\u0636\u0644 \u0631\u064a\u0645\u0648\u0646 )      def my_f(list):\n      list1 = list.reverse() \n      return list1\n\n    list =[10,20,40]\n\n    print(my_f(list)) ## \u0627\u0644\u0646\u0627\u062a\u062c \u0647\u0646\u0627 None\n\n\n\n    def my_f(list):\n      list1 = list.reverse() \n      return list\n\n    list =[10,20,40]\n\n    print(my_f(list))## [40, 20, 10]  \u0644\u0645\u0627\u0630\u0627 \u0627\u0644\u0646\u0627\u062a\u062c\u064a\u0646 \u0645\u062e\u062a\u0644\u0641\u064a\u0646  \u0628\u0628\u0633\u0627\u0637\u0629  \u0641\u0649 \u0627\u0644\u0645\u0631\u0629 \u0627\u0644\u0627\u0648\u0644\u0649  reverse()\n\u0647\u0649 \u0642\u0627\u0645\u062a \u0628\u0627\u0644\u062a\u0639\u062f\u064a\u0644 \u0639\u0644\u0649 \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u0644\u0643\u0646 \u0644\u0627\u062a\u0642\u0648\u0645 \u0628\u0627\u062e\u0631\u0627\u062c \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u062c\u062f\u064a\u062f\u0629  \u0644\u0643\u0646 \u062a\u0645 \u0627\u0644\u062a\u0639\u062f\u064a\u0644 \u0628\u0627\u0644\u0641\u0639\u0644 \u0639\u0644\u0649 \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u0648\u0627\u0630\u0627 \u062a\u0645\u062a \u0637\u0628\u0627\u0639\u0629 \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u0646\u062c\u062f \u0627\u0646  \u0642\u064a\u0645 \u0627\u0644\u0639\u0646\u0627\u0635\u0631 \u0642\u062f \u0627\u0646\u0642\u0644\u0628\u062a \u0628\u0627\u0644\u0639\u0643\u0633  \u0648\u0647\u0648 \u0645\u0627\u062d\u062f\u062b \u0641\u0649 \u0627\u0644\u0643\u0648\u062f \u0627\u0644\u062d\u0627\u0644\u0649 \u0639\u0646\u062f\u0645\u0627 \u0642\u0645\u0646\u0627 \u0628\u0627\u0631\u062c\u0627\u0639 \u0642\u064a\u0645\u0629 \u0627\u0644\u0642\u0627\u0626\u0645\u0629  \u0648\u062a\u0645\u062a \u0637\u0628\u0627\u0639\u0629 \u0627\u0644\u0642\u064a\u0645\u0629 \u0628\u0627\u0644\u0641\u0639\u0644  \u0628\u064a\u0646\u0645\u0627 \u0641\u0649 \u0627\u0644\u0645\u0631\u0629 \u0627\u0644\u0627\u0648\u0644\u0649 \u2026 \u0645\u0627 \u0637\u0644\u0628\u0646\u0627 \u0627\u062e\u0631\u0627\u062c\u0647 \u0647\u0648 \u0627\u0644\u0639\u0645\u0644\u064a\u0629 \u0646\u0641\u0633\u0647\u0627 \u2026 \u0648\u0644\u064a\u0633\u062a \u0627\u0644\u0642\u064a\u0645\u0629", 
            "title": "reverse_ar"
        }, 
        {
            "location": "/Lists/List_Methods/reverse_en/", 
            "text": "reverse_en\n\n\nadded by @Azharoo\nPython 3\n\n\nThe reverse() method reverses the elements of a given list.\nThe reverse() function doesn't take any argument.\nThe reverse() function doesn't return any value. It only reverses the elements and updates the list.\n\n\nExample 1: Reverse a List\n\n\nOperating System List\n\n\nos = ['Windows', 'macOS', 'Linux']\nprint('Original List:', os)\n\n\nList Reverse\n\n\nos.reverse()\n\n\nupdated list\n\n\nprint('Updated List:', os)\n\n\nExample 2: Reverse a List Using Slicing Operator\n\n\nOperating System List\n\n\nos = ['Windows', 'macOS', 'Linux']\nprint('Original List:', os)\n\n\nReversing a list\n\n\nSyntax: reversed_list = os[start:stop:step]\n\n\nreversed_list = os[::-1]\n\n\nupdated list\n\n\nprint('Updated List:', reversed_list)\n\n\nExample 3: Accessing Individual Elements in Reversed Order\n\n\nOperating System List\n\n\nos = ['Windows', 'macOS', 'Linux']\n\n\nPrinting Elements in Reversed Order\n\n\nfor o in reversed(os):\n    print(o)\n\n\nExample 4 : none result (remon Tutor example)\n\n\ndef my_f(list):\n  list1 = list.reverse() \n  return list1\n\n\nlist =[10,20,40]\n\n\nprint(my_f(list)) ## The result is None \n\n\nthe same example but printed a list\n\n\ndef my_f(list):\n  list1 = list.reverse() \n  return list\n\n\nlist =[10,20,40]\n\n\nprint(my_f(list))## [40, 20, 10]", 
            "title": "reverse_en"
        }, 
        {
            "location": "/Lists/List_Methods/reverse_en/#reverse_en", 
            "text": "added by @Azharoo\nPython 3  The reverse() method reverses the elements of a given list.\nThe reverse() function doesn't take any argument.\nThe reverse() function doesn't return any value. It only reverses the elements and updates the list.", 
            "title": "reverse_en"
        }, 
        {
            "location": "/Lists/List_Methods/reverse_en/#example-1-reverse-a-list", 
            "text": "", 
            "title": "Example 1: Reverse a List"
        }, 
        {
            "location": "/Lists/List_Methods/reverse_en/#operating-system-list", 
            "text": "os = ['Windows', 'macOS', 'Linux']\nprint('Original List:', os)", 
            "title": "Operating System List"
        }, 
        {
            "location": "/Lists/List_Methods/reverse_en/#list-reverse", 
            "text": "os.reverse()", 
            "title": "List Reverse"
        }, 
        {
            "location": "/Lists/List_Methods/reverse_en/#updated-list", 
            "text": "print('Updated List:', os)", 
            "title": "updated list"
        }, 
        {
            "location": "/Lists/List_Methods/reverse_en/#example-2-reverse-a-list-using-slicing-operator", 
            "text": "", 
            "title": "Example 2: Reverse a List Using Slicing Operator"
        }, 
        {
            "location": "/Lists/List_Methods/reverse_en/#operating-system-list_1", 
            "text": "os = ['Windows', 'macOS', 'Linux']\nprint('Original List:', os)", 
            "title": "Operating System List"
        }, 
        {
            "location": "/Lists/List_Methods/reverse_en/#reversing-a-list", 
            "text": "", 
            "title": "Reversing a list"
        }, 
        {
            "location": "/Lists/List_Methods/reverse_en/#syntax-reversed_list-osstartstopstep", 
            "text": "reversed_list = os[::-1]", 
            "title": "Syntax: reversed_list = os[start:stop:step]"
        }, 
        {
            "location": "/Lists/List_Methods/reverse_en/#updated-list_1", 
            "text": "print('Updated List:', reversed_list)", 
            "title": "updated list"
        }, 
        {
            "location": "/Lists/List_Methods/reverse_en/#example-3-accessing-individual-elements-in-reversed-order", 
            "text": "", 
            "title": "Example 3: Accessing Individual Elements in Reversed Order"
        }, 
        {
            "location": "/Lists/List_Methods/reverse_en/#operating-system-list_2", 
            "text": "os = ['Windows', 'macOS', 'Linux']", 
            "title": "Operating System List"
        }, 
        {
            "location": "/Lists/List_Methods/reverse_en/#printing-elements-in-reversed-order", 
            "text": "for o in reversed(os):\n    print(o)", 
            "title": "Printing Elements in Reversed Order"
        }, 
        {
            "location": "/Lists/List_Methods/reverse_en/#example-4-none-result-remon-tutor-example", 
            "text": "def my_f(list):\n  list1 = list.reverse() \n  return list1  list =[10,20,40]  print(my_f(list)) ## The result is None", 
            "title": "Example 4 : none result (remon Tutor example)"
        }, 
        {
            "location": "/Lists/List_Methods/reverse_en/#the-same-example-but-printed-a-list", 
            "text": "def my_f(list):\n  list1 = list.reverse() \n  return list  list =[10,20,40]  print(my_f(list))## [40, 20, 10]", 
            "title": "the same example but printed a list"
        }, 
        {
            "location": "/Modules/secreat-message/", 
            "text": "secreat-message\n\n\n    from __future__ import print_function\n\n\n\nThis file contain examples for os module\nWhat is os module?\nis a module using for list files in folder, we can get name of current working directory\nrename files , write on files\n\n\n    import os\n\n    def rename_files():\n        # (1) get file names from a folder\n        file_list = os.listdir(r\"C:\\Users\\user\\Desktop\\python\\pythonCodes\\Modules\\images\") \n        # r (row path) mean take the string as it's and don't interpreter \n        saved_path = os.getcwd()\n        print(saved_path)\n        saved_path = os.chdir(r\"C:\\Users\\user\\Desktop\\python\\pythonCodes\\Modules\\images\")\n        for file_name in file_list:\n            os.rename(file_name , file_name.translate(None , \"0123456789\"))\n        print(saved_path)\n\n    rename_files()", 
            "title": "secreat-message"
        }, 
        {
            "location": "/Modules/secreat-message/#secreat-message", 
            "text": "from __future__ import print_function  This file contain examples for os module\nWhat is os module?\nis a module using for list files in folder, we can get name of current working directory\nrename files , write on files      import os\n\n    def rename_files():\n        # (1) get file names from a folder\n        file_list = os.listdir(r\"C:\\Users\\user\\Desktop\\python\\pythonCodes\\Modules\\images\") \n        # r (row path) mean take the string as it's and don't interpreter \n        saved_path = os.getcwd()\n        print(saved_path)\n        saved_path = os.chdir(r\"C:\\Users\\user\\Desktop\\python\\pythonCodes\\Modules\\images\")\n        for file_name in file_list:\n            os.rename(file_name , file_name.translate(None , \"0123456789\"))\n        print(saved_path)\n\n    rename_files()", 
            "title": "secreat-message"
        }, 
        {
            "location": "/OOP/Classes_en/", 
            "text": "Classes_en\n\n\n    from __future__ import print_function\n\n\n\ndeclare a class\n\n\nSynatx\n\n\n      #class ClassName:\n      #block of code\n\n\n\nExample 1\n\ninit\n  passing initial values to your object\n\n\n    class Car:\n\n        'Print Car Name And Price'\n\n        def __init__(self,CarName,Price):\n               self.CarName = CarName\n               self.Price = Price\n\n    NewCar = Car(\"I8\", 200000)\n\n    print(\"Car Name \" + NewCar.CarName + \"  Car Price \" + str(NewCar.Price))\n\n\n    print(\"Car.__doc__:\", Car.__doc__)", 
            "title": "Classes_en"
        }, 
        {
            "location": "/OOP/Classes_en/#classes_en", 
            "text": "from __future__ import print_function  declare a class  Synatx        #class ClassName:\n      #block of code  Example 1 init   passing initial values to your object      class Car:\n\n        'Print Car Name And Price'\n\n        def __init__(self,CarName,Price):\n               self.CarName = CarName\n               self.Price = Price\n\n    NewCar = Car(\"I8\", 200000)\n\n    print(\"Car Name \" + NewCar.CarName + \"  Car Price \" + str(NewCar.Price))\n\n\n    print(\"Car.__doc__:\", Car.__doc__)", 
            "title": "Classes_en"
        }, 
        {
            "location": "/OOP/Inheritance_en/", 
            "text": "Inheritance_en\n\n\n    from __future__ import print_function\n    class Person:\n\n        def __init__(self, first, last):\n            self.firstname = first\n            self.lastname = last\n\n        def Name(self):\n            return self.firstname + \" \" + self.lastname\n\n    class Employee(Person):\n\n        def __init__(self, first, last, staffnum):\n            Person.__init__(self,first, last)\n            self.staffnumber = staffnum\n\n        def GetEmployee(self):\n            return self.Name() + \", \" +  self.staffnumber\n\n    x = Person(\"Marge\", \"Simpson\")\n    y = Employee(\"Homer\", \"Simpson\", \"1007\")\n\n    print(x.Name())\n    print(y.GetEmployee())", 
            "title": "Inheritance_en"
        }, 
        {
            "location": "/OOP/Inheritance_en/#inheritance_en", 
            "text": "from __future__ import print_function\n    class Person:\n\n        def __init__(self, first, last):\n            self.firstname = first\n            self.lastname = last\n\n        def Name(self):\n            return self.firstname + \" \" + self.lastname\n\n    class Employee(Person):\n\n        def __init__(self, first, last, staffnum):\n            Person.__init__(self,first, last)\n            self.staffnumber = staffnum\n\n        def GetEmployee(self):\n            return self.Name() + \", \" +  self.staffnumber\n\n    x = Person(\"Marge\", \"Simpson\")\n    y = Employee(\"Homer\", \"Simpson\", \"1007\")\n\n    print(x.Name())\n    print(y.GetEmployee())", 
            "title": "Inheritance_en"
        }, 
        {
            "location": "/OOP/OOP_test/", 
            "text": "OOP_test\n\n\nadded by Yassine Messaoudi AKA = TaKeO90\nThis class is about to print kids info\nAlso use inheritance example\n\n\n    class Kid_info:\n\n\n\n        def __init__(self, first_name, last_name, age,school_level ) :\n            self.first_name = first_name\n            self.last_name = last_name\n            self.age = age\n            self.school_level = school_level\n\n\n\nExample\n\n\n    kid = Kid_info(\"Ahmed\", \"issa\",\"10\",\"primary school\")\n\n\n    print (kid.first_name)\n    print (kid.last_name)\n    print (kid.age)\n    print (kid.school_level)\n\n\n\ninheritance example\n\n\n    class Parent(Kid_info) :\n\n\n\n        def __init__(self, first_name, last_name , age, work, number_of_kids):\n            self.first_name = first_name\n            self.last_name = last_name\n            self.age = age\n            self.work = work\n            self.number_of_kids = number_of_kids\n\n\n    Father = Parent(\"ahmed\", \"jalal\", \"35\", \"engenieer\" , \"2\")\n\n    print (Father.work)", 
            "title": "OOP_test"
        }, 
        {
            "location": "/OOP/OOP_test/#oop_test", 
            "text": "added by Yassine Messaoudi AKA = TaKeO90\nThis class is about to print kids info\nAlso use inheritance example      class Kid_info:\n\n\n\n        def __init__(self, first_name, last_name, age,school_level ) :\n            self.first_name = first_name\n            self.last_name = last_name\n            self.age = age\n            self.school_level = school_level  Example      kid = Kid_info(\"Ahmed\", \"issa\",\"10\",\"primary school\")\n\n\n    print (kid.first_name)\n    print (kid.last_name)\n    print (kid.age)\n    print (kid.school_level)  inheritance example      class Parent(Kid_info) :\n\n\n\n        def __init__(self, first_name, last_name , age, work, number_of_kids):\n            self.first_name = first_name\n            self.last_name = last_name\n            self.age = age\n            self.work = work\n            self.number_of_kids = number_of_kids\n\n\n    Father = Parent(\"ahmed\", \"jalal\", \"35\", \"engenieer\" , \"2\")\n\n    print (Father.work)", 
            "title": "OOP_test"
        }, 
        {
            "location": "/Print/Print_en/", 
            "text": "Print_en\n\n\nprint Hello\n\n\n    print(\"Hello\")\n\n    x, y = 1, 2\n\n\n\nprint 1\n\n\n    print(x)\n\n\n\nprint 2\n\n\n    print(y)\n\n\n\nprint 3\n\n\n    print (x) + (y)\n\n\n\nprint 1,2\n\n\n    print (x) , (y)\n\n\n\nprint (1,2)\n\n\n    print (x,y)\n\n\n\nprint [0] [0, 1]==\n because it return range frim 0 to x-1\n\n\n    print range(x) ,range(y)\n\n\n    c=\"dima\"\n    d=\"Hi\"\n\n\n\nprint dimaHi\n\n\n    print (c) + (d)\n\n\n\nprint dima Hi\n\n\n    print (c)+(\" \")+(d)\n\n\n\nprint dima\nHi\n\n\n    print (c)+(\"\\n\")+(d)\n\n\n\nprint DIMA hi\n\n\n    print (c).upper() , (d).lower()\n\n\n\nprint 1 dima\n\n\n    print str(x) +(\" \")+ (c)", 
            "title": "Print_en"
        }, 
        {
            "location": "/Print/Print_en/#print_en", 
            "text": "print Hello      print(\"Hello\")\n\n    x, y = 1, 2  print 1      print(x)  print 2      print(y)  print 3      print (x) + (y)  print 1,2      print (x) , (y)  print (1,2)      print (x,y)  print [0] [0, 1]==  because it return range frim 0 to x-1      print range(x) ,range(y)\n\n\n    c=\"dima\"\n    d=\"Hi\"  print dimaHi      print (c) + (d)  print dima Hi      print (c)+(\" \")+(d)  print dima\nHi      print (c)+(\"\\n\")+(d)  print DIMA hi      print (c).upper() , (d).lower()  print 1 dima      print str(x) +(\" \")+ (c)", 
            "title": "Print_en"
        }, 
        {
            "location": "/Strings/example/", 
            "text": "example\n\n\n    string=\"ali ahmed salm\"\n    print (string.find(\"sa\"))\n    print (string.find(\"\"))\n    print (string.find (\" \"))\n    print (string.find(\"ah\",3,5))\n    print (string.find(\"ah\",3,6))\n    def get_s(a, b):\n      return a[:b]\n    print(get_s(\"mySchool\",10))", 
            "title": "example"
        }, 
        {
            "location": "/Strings/example/#example", 
            "text": "string=\"ali ahmed salm\"\n    print (string.find(\"sa\"))\n    print (string.find(\"\"))\n    print (string.find (\" \"))\n    print (string.find(\"ah\",3,5))\n    print (string.find(\"ah\",3,6))\n    def get_s(a, b):\n      return a[:b]\n    print(get_s(\"mySchool\",10))", 
            "title": "example"
        }, 
        {
            "location": "/Strings/strings_example_ar/", 
            "text": "strings_example_ar\n\n\n    from __future__ import print_function\n\n\n\n\u0647\u0630\u0627 \u0627\u0644\u0645\u0644\u0641 \u064a\u062d\u062a\u0648\u064a \u0639\u0644\u0649 \u0628\u0639\u0636 \u0627\u0644\u0627\u0645\u062b\u0644\u0647 \u0639\u0646 \u0627\u0644\u0633\u0644\u0627\u0633\u0644 \u0627\u0644\u0646\u0635\u064a\u0647 \u0644\u0644\u063a\u0629 \u0627\u0644\u0628\u0627\u064a\u062b\u0648\u0646\n\u0645\u0627\u0647\u064a \u0627\u0644\u0633\u0644\u0627\u0633\u0644 \u0627\u0644\u0646\u0635\u064a\u0629 \u0641\u064a \u0627\u0644\u0628\u0627\u064a\u062b\u0648\u0646 \u061f\n\u0627\u0644\u0633\u0644\u0627\u0633\u0644 \u0627\u0644\u0646\u0635\u064a\u0647 \u0647\u064a \u0627\u0644\u0646\u0648\u0639 \u0627\u0644\u0627\u0643\u062b\u0631 \u0634\u0639\u0628\u064a\u0629 \u0641\u064a \u0644\u063a\u0629 \u0627\u0644\u0628\u0627\u064a\u062b\u0648\u0646\n\u0646\u0633\u062a\u0637\u064a\u0639 \u0627\u0646 \u0646\u0646\u0634\u0626\u0647\u0627 \u0628\u0633\u0647\u0648\u0644\u0647 \u0628\u0648\u0627\u0633\u0637\u0629 \u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u0627\u0642\u062a\u0628\u0627\u0633\n\u0644\u063a\u0629 \u0627\u0644\u0628\u0627\u064a\u062b\u0648\u0646 \u062a\u062a\u0639\u0627\u0645\u0644 \u0645\u0639 \u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u0627\u0642\u062a\u0628\u0627\u0633 \u0627\u0644\u0641\u0631\u062f\u064a\u0629 \u0648\u0627\u0644\u0632\u0648\u062c\u064a\u0629 \u0639\u0644\u0649 \u062d\u062f \u0633\u0648\u0627\u0621\n\u064a\u0645\u0643\u0646 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0633\u0644\u0627\u0633\u0644 \u0627\u0644\u0646\u0635\u064a\u0629 \u0628\u0633\u0647\u0648\u0644\u0647 \u0643\u0625\u0633\u0646\u0627\u062f \u0642\u064a\u0645\u0629 \u0625\u0644\u0649 \u0645\u062a\u063a\u064a\u0631\n\u0645\u0635\u062f\u0631 \u0627\u0644\u062a\u0639\u0631\u064a\u0641  https://www.tutorialspoint.com/python/python_strings.htm\n\n\n\u0645\u062b\u0627\u0644 1\n\u062a\u0645\u062a \u0645\u0634\u0627\u0631\u0643\u062a\u0629 \u0628\u0648\u0627\u0633\u0637\u0629  @remon\n\u064a\u0642\u0648\u0645 \u0647\u0630\u0627 \u0627\u0644\u0645\u062b\u0627\u0644 \u0628\u0637\u0628\u0627\u0639\u0629 \u0627\u0644\u0633\u0644\u0633\u0644\u0629 \u0627\u0644\u0646\u0635\u064a\u0647 Hello World\n\n\n    str1 =\"Hello World\"\n    print(str1) # --\n Hello World\n\n\n\n\u0645\u062b\u0627\u0644 2\n\u062a\u0645\u062a \u0645\u0634\u0627\u0631\u0643\u062a\u0629 \u0628\u0648\u0627\u0633\u0637\u0629  @remon\n\u064a\u0642\u0648\u0645 \u0647\u0630\u0627 \u0627\u0644\u0645\u062b\u0627\u0644 \u0628\u062a\u0648\u0636\u064a\u062d \u062a\u0639\u0627\u0645\u0644 \u0627\u0644\u0627\u0631\u0642\u0627\u0645 \u0643\u0633\u0644\u0627\u0633\u0644 \u0646\u0635\u064a\u0629 \u0628\u062f\u0627\u062e\u0644 \u0639\u0644\u0627\u0645\u062a\u064a \u0627\u0644\u0627\u0642\u062a\u0628\u0627\u0633\n\n\n    str2 ='Hello World 2'\n    print(str2) # --\n Hello World 2\n\n\n\n\u0645\u062b\u0627\u0644 3\n\u062a\u0645\u062a \u0645\u0634\u0627\u0631\u0643\u062a\u0629 \u0628\u0648\u0627\u0633\u0637\u0629  @remon\n\u0645\u062b\u0627\u0644 \u0622\u062e\u0631 \u0639\u0646 \u0637\u0631\u064a\u0642\u0629 \u062a\u062e\u0632\u064a\u0646 \u0627\u0644\u0627\u0631\u0642\u0627\u0645 \u0643\u0633\u0644\u0627\u0633\u0644 \u0646\u0635\u064a\u0629\n\n\n    str3 =\"2018\"\n    print(str3) # --\n 2018\n\n\n\n\u0645\u062b\u0627\u0644 4\n\u062a\u0645\u062a \u0645\u0634\u0627\u0631\u0643\u062a\u0629 \u0628\u0648\u0627\u0633\u0637\u0629  @tony.dx.3379aems5\n\u064a\u0648\u0636\u062d \u0647\u0630\u0627 \u0627\u0644\u0645\u062b\u0627\u0644 \u0637\u0631\u064a\u0642\u0629 .....\n\n\n    str4 = \"Hello 2 My friends 3\"\n    num1 = int(str4[str4.find(\"2\")])\n    num2 = int(str4[-1])\n    result = num1 + num2 \n    print(result)\n\n\n\n\u0645\u062b\u0627\u0644 5\n\u062a\u0645\u062a \u0645\u0634\u0627\u0631\u0643\u062a\u0629 \u0628\u0648\u0627\u0633\u0637\u0629  @Takeo. yassine messaoudi\n\u064a\u0648\u0636\u062d \u0647\u0630\u0627 \u0627\u0644\u0645\u062b\u0627\u0644 \u0637\u0631\u064a\u0642\u0629 \u0625\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062f\u0627\u0644\u0629\nreplace(old,new)\n\u0644\u0625\u0633\u062a\u0628\u062f\u0627\u0644 \u0627\u0644\u062d\u0631\u0648\u0641 \u0641\u064a \u0627\u0644\u0633\u0644\u0633\u0644\u0629 \u0627\u0644\u0646\u0635\u064a\u0629\n\n\n    str1 = \"1 million arab coders \"\n    a = str1.replace(\"m\" , \"M\")\n    print (a) # --\n 1 Million arab coders\n\n\n\n\u0645\u062b\u0627\u0644 6\n\u062a\u0645\u062a \u0645\u0634\u0627\u0631\u0643\u062a\u0629 \u0628\u0648\u0627\u0633\u0637\u0629  @ammore5\n\u064a\u0648\u0636\u062d \u0647\u0630\u0627 \u0627\u0644\u0645\u062b\u0627\u0644 \u0637\u0631\u064a\u0642\u0629 \u062c\u0645\u0639 \u0633\u0644\u0633\u0644\u062a\u064a\u0646 \u0646\u0635\u064a\u062a\u064a\u0646 \u0648\u0637\u0628\u0627\u0639\u062a\u0647\u0645\u0627\n\n\n    str1 = \"hi \"\n    str2 = \"there !\"\n    print (str1 + str2) # --\n hi there !", 
            "title": "strings_example_ar"
        }, 
        {
            "location": "/Strings/strings_example_ar/#strings_example_ar", 
            "text": "from __future__ import print_function  \u0647\u0630\u0627 \u0627\u0644\u0645\u0644\u0641 \u064a\u062d\u062a\u0648\u064a \u0639\u0644\u0649 \u0628\u0639\u0636 \u0627\u0644\u0627\u0645\u062b\u0644\u0647 \u0639\u0646 \u0627\u0644\u0633\u0644\u0627\u0633\u0644 \u0627\u0644\u0646\u0635\u064a\u0647 \u0644\u0644\u063a\u0629 \u0627\u0644\u0628\u0627\u064a\u062b\u0648\u0646\n\u0645\u0627\u0647\u064a \u0627\u0644\u0633\u0644\u0627\u0633\u0644 \u0627\u0644\u0646\u0635\u064a\u0629 \u0641\u064a \u0627\u0644\u0628\u0627\u064a\u062b\u0648\u0646 \u061f\n\u0627\u0644\u0633\u0644\u0627\u0633\u0644 \u0627\u0644\u0646\u0635\u064a\u0647 \u0647\u064a \u0627\u0644\u0646\u0648\u0639 \u0627\u0644\u0627\u0643\u062b\u0631 \u0634\u0639\u0628\u064a\u0629 \u0641\u064a \u0644\u063a\u0629 \u0627\u0644\u0628\u0627\u064a\u062b\u0648\u0646\n\u0646\u0633\u062a\u0637\u064a\u0639 \u0627\u0646 \u0646\u0646\u0634\u0626\u0647\u0627 \u0628\u0633\u0647\u0648\u0644\u0647 \u0628\u0648\u0627\u0633\u0637\u0629 \u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u0627\u0642\u062a\u0628\u0627\u0633\n\u0644\u063a\u0629 \u0627\u0644\u0628\u0627\u064a\u062b\u0648\u0646 \u062a\u062a\u0639\u0627\u0645\u0644 \u0645\u0639 \u0639\u0644\u0627\u0645\u0627\u062a \u0627\u0644\u0627\u0642\u062a\u0628\u0627\u0633 \u0627\u0644\u0641\u0631\u062f\u064a\u0629 \u0648\u0627\u0644\u0632\u0648\u062c\u064a\u0629 \u0639\u0644\u0649 \u062d\u062f \u0633\u0648\u0627\u0621\n\u064a\u0645\u0643\u0646 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0633\u0644\u0627\u0633\u0644 \u0627\u0644\u0646\u0635\u064a\u0629 \u0628\u0633\u0647\u0648\u0644\u0647 \u0643\u0625\u0633\u0646\u0627\u062f \u0642\u064a\u0645\u0629 \u0625\u0644\u0649 \u0645\u062a\u063a\u064a\u0631\n\u0645\u0635\u062f\u0631 \u0627\u0644\u062a\u0639\u0631\u064a\u0641  https://www.tutorialspoint.com/python/python_strings.htm  \u0645\u062b\u0627\u0644 1\n\u062a\u0645\u062a \u0645\u0634\u0627\u0631\u0643\u062a\u0629 \u0628\u0648\u0627\u0633\u0637\u0629  @remon\n\u064a\u0642\u0648\u0645 \u0647\u0630\u0627 \u0627\u0644\u0645\u062b\u0627\u0644 \u0628\u0637\u0628\u0627\u0639\u0629 \u0627\u0644\u0633\u0644\u0633\u0644\u0629 \u0627\u0644\u0646\u0635\u064a\u0647 Hello World      str1 =\"Hello World\"\n    print(str1) # --  Hello World  \u0645\u062b\u0627\u0644 2\n\u062a\u0645\u062a \u0645\u0634\u0627\u0631\u0643\u062a\u0629 \u0628\u0648\u0627\u0633\u0637\u0629  @remon\n\u064a\u0642\u0648\u0645 \u0647\u0630\u0627 \u0627\u0644\u0645\u062b\u0627\u0644 \u0628\u062a\u0648\u0636\u064a\u062d \u062a\u0639\u0627\u0645\u0644 \u0627\u0644\u0627\u0631\u0642\u0627\u0645 \u0643\u0633\u0644\u0627\u0633\u0644 \u0646\u0635\u064a\u0629 \u0628\u062f\u0627\u062e\u0644 \u0639\u0644\u0627\u0645\u062a\u064a \u0627\u0644\u0627\u0642\u062a\u0628\u0627\u0633      str2 ='Hello World 2'\n    print(str2) # --  Hello World 2  \u0645\u062b\u0627\u0644 3\n\u062a\u0645\u062a \u0645\u0634\u0627\u0631\u0643\u062a\u0629 \u0628\u0648\u0627\u0633\u0637\u0629  @remon\n\u0645\u062b\u0627\u0644 \u0622\u062e\u0631 \u0639\u0646 \u0637\u0631\u064a\u0642\u0629 \u062a\u062e\u0632\u064a\u0646 \u0627\u0644\u0627\u0631\u0642\u0627\u0645 \u0643\u0633\u0644\u0627\u0633\u0644 \u0646\u0635\u064a\u0629      str3 =\"2018\"\n    print(str3) # --  2018  \u0645\u062b\u0627\u0644 4\n\u062a\u0645\u062a \u0645\u0634\u0627\u0631\u0643\u062a\u0629 \u0628\u0648\u0627\u0633\u0637\u0629  @tony.dx.3379aems5\n\u064a\u0648\u0636\u062d \u0647\u0630\u0627 \u0627\u0644\u0645\u062b\u0627\u0644 \u0637\u0631\u064a\u0642\u0629 .....      str4 = \"Hello 2 My friends 3\"\n    num1 = int(str4[str4.find(\"2\")])\n    num2 = int(str4[-1])\n    result = num1 + num2 \n    print(result)  \u0645\u062b\u0627\u0644 5\n\u062a\u0645\u062a \u0645\u0634\u0627\u0631\u0643\u062a\u0629 \u0628\u0648\u0627\u0633\u0637\u0629  @Takeo. yassine messaoudi\n\u064a\u0648\u0636\u062d \u0647\u0630\u0627 \u0627\u0644\u0645\u062b\u0627\u0644 \u0637\u0631\u064a\u0642\u0629 \u0625\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0644\u062f\u0627\u0644\u0629\nreplace(old,new)\n\u0644\u0625\u0633\u062a\u0628\u062f\u0627\u0644 \u0627\u0644\u062d\u0631\u0648\u0641 \u0641\u064a \u0627\u0644\u0633\u0644\u0633\u0644\u0629 \u0627\u0644\u0646\u0635\u064a\u0629      str1 = \"1 million arab coders \"\n    a = str1.replace(\"m\" , \"M\")\n    print (a) # --  1 Million arab coders  \u0645\u062b\u0627\u0644 6\n\u062a\u0645\u062a \u0645\u0634\u0627\u0631\u0643\u062a\u0629 \u0628\u0648\u0627\u0633\u0637\u0629  @ammore5\n\u064a\u0648\u0636\u062d \u0647\u0630\u0627 \u0627\u0644\u0645\u062b\u0627\u0644 \u0637\u0631\u064a\u0642\u0629 \u062c\u0645\u0639 \u0633\u0644\u0633\u0644\u062a\u064a\u0646 \u0646\u0635\u064a\u062a\u064a\u0646 \u0648\u0637\u0628\u0627\u0639\u062a\u0647\u0645\u0627      str1 = \"hi \"\n    str2 = \"there !\"\n    print (str1 + str2) # --  hi there !", 
            "title": "strings_example_ar"
        }, 
        {
            "location": "/Strings/strings_example_en/", 
            "text": "strings_example_en\n\n\n    from __future__ import print_function\n\n\n\nThis file contains some examples for Python Strings\nWhat is Strings in python ?\nStrings are amongst the most popular types in Python.\nWe can create them simply by enclosing characters in quotes.\nPython treats single quotes the same as double quotes.\nCreating strings is as simple as assigning a value to a variable.\nsource of Definition https://www.tutorialspoint.com/python/python_strings.htm\n\n\nexample 1\nadded by @remon\n\n\n    str1 =\"Hello World\"\n    print(str1)\n\n\n\nexample 2\nadded by @remon\n\n\n    str2 ='Hello World 2'\n    print(str2)\n\n\n\nexample 3\nadded by @remon\n\n\n    str3 =\"2018\"\n    print(str3)\n\n\n\nexample 4\nadded by @tony.dx.3379aems5\n\n\n    str4 = \"Hello 2 My friends 3\"\n    num1 = int(str4[str4.find(\"2\")])\n    num2 = int(str4[-1])\n    result = num1 + num2 \n    print(result)\n\n\n\nexample 5\n\n\nadded by @Takeo. yassine messaoudi\n\n\n    str1 = \"1 million arab coders \"\n    a = str1.replace(\"m\" , \"M\")\n    print (a)\n\n\n\nexample 6\nadded by @ammore5\nThis example demonstrates how to concatenate two strings\n\n\n    str1 = \"hi \"\n    str2 = \"there !\"\n    print (str1 + str2)", 
            "title": "strings_example_en"
        }, 
        {
            "location": "/Strings/strings_example_en/#strings_example_en", 
            "text": "from __future__ import print_function  This file contains some examples for Python Strings\nWhat is Strings in python ?\nStrings are amongst the most popular types in Python.\nWe can create them simply by enclosing characters in quotes.\nPython treats single quotes the same as double quotes.\nCreating strings is as simple as assigning a value to a variable.\nsource of Definition https://www.tutorialspoint.com/python/python_strings.htm  example 1\nadded by @remon      str1 =\"Hello World\"\n    print(str1)  example 2\nadded by @remon      str2 ='Hello World 2'\n    print(str2)  example 3\nadded by @remon      str3 =\"2018\"\n    print(str3)  example 4\nadded by @tony.dx.3379aems5      str4 = \"Hello 2 My friends 3\"\n    num1 = int(str4[str4.find(\"2\")])\n    num2 = int(str4[-1])\n    result = num1 + num2 \n    print(result)  example 5  added by @Takeo. yassine messaoudi      str1 = \"1 million arab coders \"\n    a = str1.replace(\"m\" , \"M\")\n    print (a)  example 6\nadded by @ammore5\nThis example demonstrates how to concatenate two strings      str1 = \"hi \"\n    str2 = \"there !\"\n    print (str1 + str2)", 
            "title": "strings_example_en"
        }, 
        {
            "location": "/Strings/strings_example_fr/", 
            "text": "strings_example_fr", 
            "title": "strings_example_fr"
        }, 
        {
            "location": "/Strings/strings_example_fr/#strings_example_fr", 
            "text": "", 
            "title": "strings_example_fr"
        }, 
        {
            "location": "/True and False/Boolean_Type_Fr/", 
            "text": "Boolean_Type_Fr\n\n\n    from __future__ import print_function\n\n\n\nImane OUBALID: Une jeune marocaine, titulaire d'un master en  R\u00e9seaux et Syst\u00e8mes Informatique.\nElle dispose d'un esprit d'analyse, de synth\u00e8se, d'une capacit\u00e9 d'adaptation aux nouvelles situations,\net elle est passionn\u00e9e par la programmation et les nouvelles technologies.\n\n\nBooleen est un type de donnees qui ne peut prendre que deux valeurs logique: vrai (True) ou faux (False)\nIl utilise d'autre expression tell que: et(and) non(not) ou(or)\nA note il faut respecter l'ecriture des mots clea = 6\n\n\nvoila un exemple simple d'expressions booleennes\n\n\n    A = 6\n    print((A == 7)) #renvoie la valeur logique False\n    print((A == 6)) #True\n\n\n\nl'utilisation de l'operateur non(not) renvoie l'oppose de la valeur\n\n\n    print('************ Operateur: not *************')\n    B = True\n    C = False\n    print((not B)) # resultat sera l'oppose de la valeur logique True = False(faux)\n    print((not not B))#True\n    print((not C))#True\n\n\n\nl'operateur and(et) renvoie Vrai si tous les valeurs sont vraies\n\n\n    print('************ Operateur: And *************')\n    print((True and True)) #True\n    print((True and False)) #False\n    print((False and True)) #False\n    print((False and False)) #False\n\n    D = 8\n    E = 9\n    print((D == 8 and D==9))#False\n    print((E == 9 and D==8))#True\n    print((not D and E==9))#False\n\n\n\nl'operateur or(ou) renvoie Vrai si ou moins une valeur est vraie\n\n\n    print('************ Operateur: or *************')\n    print((True or True)) #True\n    print((True or False)) #True\n    print((False or True)) #True\n    print((False or False)) #False\n\n    F=3\n    G=5\n    print((F==3 or F==0))#True\n    print((F==0 or G==0))#False\n    print((not F==0 or G==0))#True", 
            "title": "Boolean_Type_Fr"
        }, 
        {
            "location": "/True and False/Boolean_Type_Fr/#boolean_type_fr", 
            "text": "from __future__ import print_function  Imane OUBALID: Une jeune marocaine, titulaire d'un master en  R\u00e9seaux et Syst\u00e8mes Informatique.\nElle dispose d'un esprit d'analyse, de synth\u00e8se, d'une capacit\u00e9 d'adaptation aux nouvelles situations,\net elle est passionn\u00e9e par la programmation et les nouvelles technologies.  Booleen est un type de donnees qui ne peut prendre que deux valeurs logique: vrai (True) ou faux (False)\nIl utilise d'autre expression tell que: et(and) non(not) ou(or)\nA note il faut respecter l'ecriture des mots clea = 6  voila un exemple simple d'expressions booleennes      A = 6\n    print((A == 7)) #renvoie la valeur logique False\n    print((A == 6)) #True  l'utilisation de l'operateur non(not) renvoie l'oppose de la valeur      print('************ Operateur: not *************')\n    B = True\n    C = False\n    print((not B)) # resultat sera l'oppose de la valeur logique True = False(faux)\n    print((not not B))#True\n    print((not C))#True  l'operateur and(et) renvoie Vrai si tous les valeurs sont vraies      print('************ Operateur: And *************')\n    print((True and True)) #True\n    print((True and False)) #False\n    print((False and True)) #False\n    print((False and False)) #False\n\n    D = 8\n    E = 9\n    print((D == 8 and D==9))#False\n    print((E == 9 and D==8))#True\n    print((not D and E==9))#False  l'operateur or(ou) renvoie Vrai si ou moins une valeur est vraie      print('************ Operateur: or *************')\n    print((True or True)) #True\n    print((True or False)) #True\n    print((False or True)) #True\n    print((False or False)) #False\n\n    F=3\n    G=5\n    print((F==3 or F==0))#True\n    print((F==0 or G==0))#False\n    print((not F==0 or G==0))#True", 
            "title": "Boolean_Type_Fr"
        }, 
        {
            "location": "/True and False/Logic/", 
            "text": "Logic\n\n\n    from __future__ import print_function\n\n\n\nthis is a logic table for (and, or)\nbefore run this example you must \n*install library truths\n\nin cmd run command pip install truths\n\n\n    from truths import Truths\n\n    try:\n        raw_input          # Python 2\n    except NameError:\n        raw_input = input  # Python 3\n\n    print(\"-------------------------------------------------------\")\n    print(\"\"\"Example Prerequisite : please insatll truths library\n              *Open CMD rum command pip install truths *\"\"\")\n    print(\"-------------------------------------------------------\")\n\n    r = raw_input(\" Are you install truths???? :) Y:Yes , N:NO :) \").strip().upper()\n\n    def emp(r):\n        if r==\"Y\":\n            print(Truths(['a', 'b', 'x']))\n            print(Truths(['a', 'b', 'cat', 'has_address'], ['(a and b)', 'a and b or cat', 'a and (b or cat) or has_address']))\n            print(Truths(['a', 'b', 'x', 'd'], ['(a and b)', 'a and b or x', 'a and (b or x) or d'], ints=False))\n        else:\n            print(\"------------------------\")\n            print(\"------------------------\")\n            print(\"Please to Install truths\")\n            print(\"------------------------\")\n            print(\"------------------------\")\n            print(\"------------------------\")\n        raw_input(\"\")\n\n\n\n\n    print(emp(r))", 
            "title": "Logic"
        }, 
        {
            "location": "/True and False/Logic/#logic", 
            "text": "from __future__ import print_function  this is a logic table for (and, or)\nbefore run this example you must  *install library truths \nin cmd run command pip install truths      from truths import Truths\n\n    try:\n        raw_input          # Python 2\n    except NameError:\n        raw_input = input  # Python 3\n\n    print(\"-------------------------------------------------------\")\n    print(\"\"\"Example Prerequisite : please insatll truths library\n              *Open CMD rum command pip install truths *\"\"\")\n    print(\"-------------------------------------------------------\")\n\n    r = raw_input(\" Are you install truths???? :) Y:Yes , N:NO :) \").strip().upper()\n\n    def emp(r):\n        if r==\"Y\":\n            print(Truths(['a', 'b', 'x']))\n            print(Truths(['a', 'b', 'cat', 'has_address'], ['(a and b)', 'a and b or cat', 'a and (b or cat) or has_address']))\n            print(Truths(['a', 'b', 'x', 'd'], ['(a and b)', 'a and b or x', 'a and (b or x) or d'], ints=False))\n        else:\n            print(\"------------------------\")\n            print(\"------------------------\")\n            print(\"Please to Install truths\")\n            print(\"------------------------\")\n            print(\"------------------------\")\n            print(\"------------------------\")\n        raw_input(\"\")\n\n\n\n\n    print(emp(r))", 
            "title": "Logic"
        }, 
        {
            "location": "/True and False/True_False_Examples_En/", 
            "text": "True_False_Examples_En\n\n\n    from __future__ import print_function\n\n\n\nexample1\nby @tony.dx.3379aems5\n\n\n    if True and False:\n        print (\"False\") #will not print\n    if True and True:\n        print (\"True\") #will print true\n    if False and False:\n        print (\"False\") #will not print", 
            "title": "True_False_Examples_En"
        }, 
        {
            "location": "/True and False/True_False_Examples_En/#true_false_examples_en", 
            "text": "from __future__ import print_function  example1\nby @tony.dx.3379aems5      if True and False:\n        print (\"False\") #will not print\n    if True and True:\n        print (\"True\") #will print true\n    if False and False:\n        print (\"False\") #will not print", 
            "title": "True_False_Examples_En"
        }, 
        {
            "location": "/Turtle/House_en/", 
            "text": "House_en\n\n\n    from turtle import *\n    goto(300, 0)\n    goto(300, 400)\n    goto(50, 400)\n    goto(0, 300)\n    goto(0, 0)\n    penup()\n    goto(50, 400)\n    pendown()\n    goto(100, 300)\n    goto(100, 0)\n    penup()\n    goto(0, 300)\n    pendown()\n    goto(100, 300)\n    goto(300, 300)\n    screensize(2000, 2000)", 
            "title": "House_en"
        }, 
        {
            "location": "/Turtle/House_en/#house_en", 
            "text": "from turtle import *\n    goto(300, 0)\n    goto(300, 400)\n    goto(50, 400)\n    goto(0, 300)\n    goto(0, 0)\n    penup()\n    goto(50, 400)\n    pendown()\n    goto(100, 300)\n    goto(100, 0)\n    penup()\n    goto(0, 300)\n    pendown()\n    goto(100, 300)\n    goto(300, 300)\n    screensize(2000, 2000)", 
            "title": "House_en"
        }, 
        {
            "location": "/Turtle/draw_circle_en/", 
            "text": "draw_circle_en\n\n\nadded by @Azharoo\nPython 3\n\n\nExample - 1\n\n\nDraw one circle\n\n\n    import turtle\n\n    my_turtle = turtle.Turtle()\n    my_turtle.pencolor(\"red\")\n\n    def circle(length,angle): \n      my_turtle.forward(length)\n      my_turtle.left(angle)\n\n    for i in range(46):\n      circle(10,8)\n\n\n      # Example - 2\n      #Draw Circle of Squares\n\n    import turtle\n\n    my_turtle = turtle.Turtle()\n    my_turtle.speed(0)\n    my_turtle.pencolor(\"blue\")\n\n    def square(length,angle):\n      for i in range(4):\n        my_turtle.forward(length)\n        my_turtle.right(angle)\n\n    for i in range(100):\n      square(100,90)\n      my_turtle.right(11)\n\n\n\nExample - 3\n\n\n      #Draw beautiful_circles\n\n    import turtle\n    t = turtle.Turtle()\n    window = turtle.Screen()\n    window.bgcolor(\"black\")\n    colors=[\"red\",\"yellow\",\"purple\"]\n\n    for x in range(10,50):\n        t.circle(x)\n        t.color(colors[x%3])\n        t.left(90)\n\n    t.screen.exitonclick()\n    t.screen.mainloop()", 
            "title": "draw_circle_en"
        }, 
        {
            "location": "/Turtle/draw_circle_en/#draw_circle_en", 
            "text": "added by @Azharoo\nPython 3  Example - 1  Draw one circle      import turtle\n\n    my_turtle = turtle.Turtle()\n    my_turtle.pencolor(\"red\")\n\n    def circle(length,angle): \n      my_turtle.forward(length)\n      my_turtle.left(angle)\n\n    for i in range(46):\n      circle(10,8)\n\n\n      # Example - 2\n      #Draw Circle of Squares\n\n    import turtle\n\n    my_turtle = turtle.Turtle()\n    my_turtle.speed(0)\n    my_turtle.pencolor(\"blue\")\n\n    def square(length,angle):\n      for i in range(4):\n        my_turtle.forward(length)\n        my_turtle.right(angle)\n\n    for i in range(100):\n      square(100,90)\n      my_turtle.right(11)  Example - 3        #Draw beautiful_circles\n\n    import turtle\n    t = turtle.Turtle()\n    window = turtle.Screen()\n    window.bgcolor(\"black\")\n    colors=[\"red\",\"yellow\",\"purple\"]\n\n    for x in range(10,50):\n        t.circle(x)\n        t.color(colors[x%3])\n        t.left(90)\n\n    t.screen.exitonclick()\n    t.screen.mainloop()", 
            "title": "draw_circle_en"
        }, 
        {
            "location": "/Turtle/draw_en/", 
            "text": "draw_en\n\n\nhttps://github.com/asweigart/simple-turtle-tutorial-for-python/blob/master/simple_turtle_tutorial.md\n\n\n    from turtle import *\n    for i in range(500):# this \"for\" loop will repeat these functions 500 times\n        speed(50)\n        forward(i)\n        left(91)", 
            "title": "draw_en"
        }, 
        {
            "location": "/Turtle/draw_en/#draw_en", 
            "text": "https://github.com/asweigart/simple-turtle-tutorial-for-python/blob/master/simple_turtle_tutorial.md      from turtle import *\n    for i in range(500):# this \"for\" loop will repeat these functions 500 times\n        speed(50)\n        forward(i)\n        left(91)", 
            "title": "draw_en"
        }, 
        {
            "location": "/Turtle/draw_rectangle_en/", 
            "text": "draw_rectangle_en\n\n\nadded by @Azharoo\nPython 3\ndraw a simple rectangle\n\n\nExample - 1\n\n\n    import turtle\n    t = turtle.Turtle()\n    window = turtle.Screen()\n    window.bgcolor(\"black\")\n    t.hideturtle()\n    t.color(\"red\")\n\n    def slanted_rectangle(length,width):\n        for steps in range(2):\n            t.fd(width)\n            t.left(90)\n            t.fd(length)\n            t.left(90)\n\n    slanted_rectangle(length=200,width=100)\n\n\n\nExample - 2\ndraw a slanted rectangle\n\n\n    import turtle\n    t = turtle.Turtle()\n    window = turtle.Screen()\n    window.bgcolor(\"black\")\n\n\n    t.hideturtle()\n    t.color(\"red\")\n\n    def slanted_rectangle(length,width,angle):\n        t.setheading(angle)\n        for steps in range(2):\n            t.fd(width)\n            t.left(90)\n            t.fd(length)\n            t.left(90)\n\n    slanted_rectangle(length=200,angle=45,width=100)", 
            "title": "draw_rectangle_en"
        }, 
        {
            "location": "/Turtle/draw_rectangle_en/#draw_rectangle_en", 
            "text": "added by @Azharoo\nPython 3\ndraw a simple rectangle  Example - 1      import turtle\n    t = turtle.Turtle()\n    window = turtle.Screen()\n    window.bgcolor(\"black\")\n    t.hideturtle()\n    t.color(\"red\")\n\n    def slanted_rectangle(length,width):\n        for steps in range(2):\n            t.fd(width)\n            t.left(90)\n            t.fd(length)\n            t.left(90)\n\n    slanted_rectangle(length=200,width=100)  Example - 2\ndraw a slanted rectangle      import turtle\n    t = turtle.Turtle()\n    window = turtle.Screen()\n    window.bgcolor(\"black\")\n\n\n    t.hideturtle()\n    t.color(\"red\")\n\n    def slanted_rectangle(length,width,angle):\n        t.setheading(angle)\n        for steps in range(2):\n            t.fd(width)\n            t.left(90)\n            t.fd(length)\n            t.left(90)\n\n    slanted_rectangle(length=200,angle=45,width=100)", 
            "title": "draw_rectangle_en"
        }, 
        {
            "location": "/Turtle/draw_square_en/", 
            "text": "draw_square_en\n\n\nadded by @Azharoo\nPython 3\ndraw a simple square\n\n\nExample - 1\n\n\n    import turtle\n    t = turtle.Turtle()\n    window = turtle.Screen()\n    window.bgcolor(\"black\")\n    t.color(\"blue\")\n    t.shape(\"turtle\")\n    for i in range(4):\n      t.fd(100)\n      t.left(90)\n\n\n\nExample - 2\n\n\n    import turtle\n    t= turtle.Turtle()\n    t.screen.bgcolor(\"black\")\n    t.color(\"red\")\n    t.hideturtle()  # Hide the turtle during the draw\n\n    def square(length):\n        for steps in range(4):\n            t.fd(length)\n            t.left(90)\n\n    square(100)", 
            "title": "draw_square_en"
        }, 
        {
            "location": "/Turtle/draw_square_en/#draw_square_en", 
            "text": "added by @Azharoo\nPython 3\ndraw a simple square  Example - 1      import turtle\n    t = turtle.Turtle()\n    window = turtle.Screen()\n    window.bgcolor(\"black\")\n    t.color(\"blue\")\n    t.shape(\"turtle\")\n    for i in range(4):\n      t.fd(100)\n      t.left(90)  Example - 2      import turtle\n    t= turtle.Turtle()\n    t.screen.bgcolor(\"black\")\n    t.color(\"red\")\n    t.hideturtle()  # Hide the turtle during the draw\n\n    def square(length):\n        for steps in range(4):\n            t.fd(length)\n            t.left(90)\n\n    square(100)", 
            "title": "draw_square_en"
        }, 
        {
            "location": "/Turtle/draw_triangle_en/", 
            "text": "draw_triangle_en\n\n\nadded by @Azharoo\nPython 3\n\n\nExample - 1\n\n\nDraw triangle\n\n\n    import turtle\n    t = turtle.Turtle()\n    window = turtle.Screen()\n    window.bgcolor(\"black\")\n\n    t.color(\"red\")\n    t.hideturtle() # hide the turtle\n\n    def triangle(length,angle=120):\n        for steps in range(3):\n            t.fd(length)\n            t.left(angle)\n\n    triangle(200)", 
            "title": "draw_triangle_en"
        }, 
        {
            "location": "/Turtle/draw_triangle_en/#draw_triangle_en", 
            "text": "added by @Azharoo\nPython 3  Example - 1  Draw triangle      import turtle\n    t = turtle.Turtle()\n    window = turtle.Screen()\n    window.bgcolor(\"black\")\n\n    t.color(\"red\")\n    t.hideturtle() # hide the turtle\n\n    def triangle(length,angle=120):\n        for steps in range(3):\n            t.fd(length)\n            t.left(angle)\n\n    triangle(200)", 
            "title": "draw_triangle_en"
        }, 
        {
            "location": "/Twilio + Profanity/(Twilio + Profanity) Arabic version/", 
            "text": "(Twilio + Profanity) Arabic version\n\n\n\u0623\u0636\u064a\u0641\u062a \u0645\u0646 \u0642\u0628\u0644 @Modydj\nPython 2.7\n2 in 1 (Twilio + Profanity Editor)\n\n\n\u0622\u0644\u064a\u0629 \u0627\u0644\u0639\u0645\u0644:\n\n\n1- \u0633\u0623\u0642\u0648\u0645 \u0628\u0625\u0646\u0634\u0627\u0621 \u062f\u0627\u0644\u0629 def \u062a\u062d\u062a \u0627\u0633\u0645 see_me_that_in_phone\n\n\n2- \u0633\u0623\u062c\u0639\u0644\u0647 \u064a\u0639\u0648\u062f \u0644\u0644\u062f\u0627\u0644\u062a\u064a\u0646 functions (check_profainty, read_text)\n\n\n3- \u0633\u0623\u0633\u062a\u0642\u0628\u0644 \u0639\u0644\u0649 \u062c\u0648\u0627\u0644\u064a \u0641\u0642\u0637 \u0627\u0644\u0646\u062a\u064a\u062c\u0629 \u0627\u0646 \u0643\u0627\u0646\u062a \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u062a\u062d\u0648\u064a \u0639\u0644\u0649 \u0643\u0644\u0645\u0627\u062a \u063a\u064a\u0631 \u0645\u0631\u063a\u0648\u0628 \u0628\u0647\u0627 \u0623\u0645 \u0644\u0627\n\n\n\u062d\u0633\u0646\u0627\u064b \u060c \u0641\u0644\u0646\u0628\u062f\u0623 ;)\n\n\n\u0627\u0633\u062a\u064a\u0631\u0627\u062f \u0627\u0644\u0645\u0643\u062a\u0628\u0627\u062a \u0627\u0644\u0645\u0646\u0627\u0633\u0628\u0629 \u0641\u064a \u0627\u0644\u0628\u062f\u0627\u064a\u0629\n\n\n    import urllib\n    from twilio.rest import Client\n\n\n\n\u0643\u062a\u0627\u0628\u0629 \u062f\u0627\u0644\u062a\u064a\u0646 def \u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0639\u0645\u0644\u0646\u0627\u060c\n\u0627\u0644\u0623\u0648\u0644\u0649 \u062a\u062f\u0639\u0649 \u0628\u0640 read_text, \u0648\u0627\u0644\u062a\u064a \u0633\u0648\u0641 \u062a\u0642\u0631\u0623 \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0645\u0631\u0627\u062f \u0642\u0631\u0627\u0621\u062a\u0647 \u0648\u0641\u062d\u0635\u0647.\n\n\n    def read_text():\n        quotes = open(r'C:\\Users\\2\\Desktop\\movie_quotes.txt','r')# \u0642\u0645 \u0628\u062a\u063a\u064a\u0631 \u0647\u0630\u0627 \u0627\u0644\u0643\u0648\u062f \u0628\u062d\u0633\u0628 \u0645\u0633\u0627\u0631 \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0645\u0631\u0627\u062f \u0641\u062d\u0635\u0647\n        contents_of_file = quotes.read()\n        #print (contents_of_file)\n        quotes.close()\n        check_profainty(contents_of_file)\n\n\n\n\u0627\u0644\u062b\u0627\u0646\u064a\u0629 check profanity , \u0648\u0627\u0644\u062a\u064a \u0633\u0648\u0641 \u062a\u0623\u062e\u0630 \u0632\u0645\u0627\u0645 \u0627\u0644\u0623\u0645\u0648\u0631 \u0644\u062a\u0646\u0641\u064a\u0630 \u0627\u0644\u0623\u0645\u0631\n\u0627\u0644\u0646\u0627\u062a\u062c \u0639\u0646 \u0642\u0631\u0627\u0621\u0629 \u0627\u0644\u062f\u0627\u0644\u0629 \u0627\u0644\u0623\u0648\u0644\u0649 read_text def.\n\n\n    def check_profainty(text_to_check):\n        account_sid = \"ACdXXXXXXXXXXXXXXXX\" #\u0627\u062f\u062e\u0644 \u0647\u0630\u0627 \u0627\u0644\u0631\u0642\u0645 \u0645\u0646 twilio\n        auth_token = \"3bXXXXXXXXXXXXXXXXX\" #\u0627\u062f\u062e\u0644 \u0647\u0630\u0627 \u0627\u0644\u0631\u0642\u0645 \u0645\u0646 twilio\n        client = Client(account_sid, auth_token)\n        connection = urllib.urlopen(\"http://www.wdylike.appspot.com/?q=\" + text_to_check)\n        output= connection.read()\n        #print (output)\n        connection.close()\n\n        if \"true\" in output:\n            message = client.messages.create(\n                body=\"profainty Alert!\",\n                to=\"+213xxxxxxxx\", # \u0636\u0639 \u0631\u0642\u0645 \u0647\u0627\u062a\u0641\u0643\n                from_=\"+143xxxxxxx\") # \u0636\u0639 \u0631\u0642\u0645\u0643 \u0641\u064a \u0645\u0648\u0642\u0639 twilio\n            print(message.sid)\n\n        elif \"false\" in output:\n            message = client.messages.create(\n                body=\"This document has no curse words!\",\n                to=\"+213xxxxxxxx\", # \u0636\u0639 \u0631\u0642\u0645 \u0647\u0627\u062a\u0641\u0643\n                from_=\"+143xxxxxxx\") # \u0636\u0639 \u0631\u0642\u0645\u0643 \u0641\u064a \u0645\u0648\u0642\u0639 twilio\n            print(message.sid)\n\n        else:\n            message = client.messages.create(\n                body=\"Could not scan the document properly.\",\n                to=\"+213xxxxxxxx\", # \u0636\u0639 \u0631\u0642\u0645 \u0647\u0627\u062a\u0641\u0643\n                from_=\"+143xxxxxxx\") # \u0636\u0639 \u0631\u0642\u0645\u0643 \u0641\u064a \u0645\u0648\u0642\u0639 twilio\n            print(message.sid)\n\n\n\n\u0627\u0644\u062e\u0637\u0648\u0629 \u0627\u0644\u0623\u062e\u064a\u0631\u0629, \u0648\u0644\u0643\u0646 \u0641\u064a \u0627\u0644\u0648\u0627\u0642\u0639 , \u0647\u0630\u0647 \u0627\u0644\u062e\u0637\u0648\u0629 \u0627\u0644\u0623\u0648\u0644\u0649, \u0639\u0646\u062f\u0645\u0627 \u062a\u0642\u0648\u0645 \u0628\u062a\u0634\u063a\u064a\u0644 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c,\n\u0647\u0630\u0647 \u0627\u0644\u062f\u0627\u0644\u0629 \u0633\u0648\u0641 \u062a\u0628\u062f\u0623 \u0628\u0627\u0644\u0639\u0645\u0644 \u0639\u0644\u0649 \u0627\u0633\u062a\u062f\u0639\u0627\u0621 \u062f\u0627\u0644\u0629 read_text .\n\n\n    def see_me_that_in_phone():\n              x = read_text()\n\n\n\n\u062f\u0639\u0648\u0646\u0627 \u0646\u0628\u062f\u0623 ;)\n\n\n    see_me_that_in_phone()", 
            "title": "(Twilio + Profanity) Arabic version"
        }, 
        {
            "location": "/Twilio + Profanity/(Twilio + Profanity) Arabic version/#twilio-profanity-arabic-version", 
            "text": "\u0623\u0636\u064a\u0641\u062a \u0645\u0646 \u0642\u0628\u0644 @Modydj\nPython 2.7\n2 in 1 (Twilio + Profanity Editor)  \u0622\u0644\u064a\u0629 \u0627\u0644\u0639\u0645\u0644:  1- \u0633\u0623\u0642\u0648\u0645 \u0628\u0625\u0646\u0634\u0627\u0621 \u062f\u0627\u0644\u0629 def \u062a\u062d\u062a \u0627\u0633\u0645 see_me_that_in_phone  2- \u0633\u0623\u062c\u0639\u0644\u0647 \u064a\u0639\u0648\u062f \u0644\u0644\u062f\u0627\u0644\u062a\u064a\u0646 functions (check_profainty, read_text)  3- \u0633\u0623\u0633\u062a\u0642\u0628\u0644 \u0639\u0644\u0649 \u062c\u0648\u0627\u0644\u064a \u0641\u0642\u0637 \u0627\u0644\u0646\u062a\u064a\u062c\u0629 \u0627\u0646 \u0643\u0627\u0646\u062a \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u062a\u062d\u0648\u064a \u0639\u0644\u0649 \u0643\u0644\u0645\u0627\u062a \u063a\u064a\u0631 \u0645\u0631\u063a\u0648\u0628 \u0628\u0647\u0627 \u0623\u0645 \u0644\u0627  \u062d\u0633\u0646\u0627\u064b \u060c \u0641\u0644\u0646\u0628\u062f\u0623 ;)  \u0627\u0633\u062a\u064a\u0631\u0627\u062f \u0627\u0644\u0645\u0643\u062a\u0628\u0627\u062a \u0627\u0644\u0645\u0646\u0627\u0633\u0628\u0629 \u0641\u064a \u0627\u0644\u0628\u062f\u0627\u064a\u0629      import urllib\n    from twilio.rest import Client  \u0643\u062a\u0627\u0628\u0629 \u062f\u0627\u0644\u062a\u064a\u0646 def \u0644\u062a\u062d\u0642\u0642 \u0645\u0646 \u0639\u0645\u0644\u0646\u0627\u060c\n\u0627\u0644\u0623\u0648\u0644\u0649 \u062a\u062f\u0639\u0649 \u0628\u0640 read_text, \u0648\u0627\u0644\u062a\u064a \u0633\u0648\u0641 \u062a\u0642\u0631\u0623 \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0645\u0631\u0627\u062f \u0642\u0631\u0627\u0621\u062a\u0647 \u0648\u0641\u062d\u0635\u0647.      def read_text():\n        quotes = open(r'C:\\Users\\2\\Desktop\\movie_quotes.txt','r')# \u0642\u0645 \u0628\u062a\u063a\u064a\u0631 \u0647\u0630\u0627 \u0627\u0644\u0643\u0648\u062f \u0628\u062d\u0633\u0628 \u0645\u0633\u0627\u0631 \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0645\u0631\u0627\u062f \u0641\u062d\u0635\u0647\n        contents_of_file = quotes.read()\n        #print (contents_of_file)\n        quotes.close()\n        check_profainty(contents_of_file)  \u0627\u0644\u062b\u0627\u0646\u064a\u0629 check profanity , \u0648\u0627\u0644\u062a\u064a \u0633\u0648\u0641 \u062a\u0623\u062e\u0630 \u0632\u0645\u0627\u0645 \u0627\u0644\u0623\u0645\u0648\u0631 \u0644\u062a\u0646\u0641\u064a\u0630 \u0627\u0644\u0623\u0645\u0631\n\u0627\u0644\u0646\u0627\u062a\u062c \u0639\u0646 \u0642\u0631\u0627\u0621\u0629 \u0627\u0644\u062f\u0627\u0644\u0629 \u0627\u0644\u0623\u0648\u0644\u0649 read_text def.      def check_profainty(text_to_check):\n        account_sid = \"ACdXXXXXXXXXXXXXXXX\" #\u0627\u062f\u062e\u0644 \u0647\u0630\u0627 \u0627\u0644\u0631\u0642\u0645 \u0645\u0646 twilio\n        auth_token = \"3bXXXXXXXXXXXXXXXXX\" #\u0627\u062f\u062e\u0644 \u0647\u0630\u0627 \u0627\u0644\u0631\u0642\u0645 \u0645\u0646 twilio\n        client = Client(account_sid, auth_token)\n        connection = urllib.urlopen(\"http://www.wdylike.appspot.com/?q=\" + text_to_check)\n        output= connection.read()\n        #print (output)\n        connection.close()\n\n        if \"true\" in output:\n            message = client.messages.create(\n                body=\"profainty Alert!\",\n                to=\"+213xxxxxxxx\", # \u0636\u0639 \u0631\u0642\u0645 \u0647\u0627\u062a\u0641\u0643\n                from_=\"+143xxxxxxx\") # \u0636\u0639 \u0631\u0642\u0645\u0643 \u0641\u064a \u0645\u0648\u0642\u0639 twilio\n            print(message.sid)\n\n        elif \"false\" in output:\n            message = client.messages.create(\n                body=\"This document has no curse words!\",\n                to=\"+213xxxxxxxx\", # \u0636\u0639 \u0631\u0642\u0645 \u0647\u0627\u062a\u0641\u0643\n                from_=\"+143xxxxxxx\") # \u0636\u0639 \u0631\u0642\u0645\u0643 \u0641\u064a \u0645\u0648\u0642\u0639 twilio\n            print(message.sid)\n\n        else:\n            message = client.messages.create(\n                body=\"Could not scan the document properly.\",\n                to=\"+213xxxxxxxx\", # \u0636\u0639 \u0631\u0642\u0645 \u0647\u0627\u062a\u0641\u0643\n                from_=\"+143xxxxxxx\") # \u0636\u0639 \u0631\u0642\u0645\u0643 \u0641\u064a \u0645\u0648\u0642\u0639 twilio\n            print(message.sid)  \u0627\u0644\u062e\u0637\u0648\u0629 \u0627\u0644\u0623\u062e\u064a\u0631\u0629, \u0648\u0644\u0643\u0646 \u0641\u064a \u0627\u0644\u0648\u0627\u0642\u0639 , \u0647\u0630\u0647 \u0627\u0644\u062e\u0637\u0648\u0629 \u0627\u0644\u0623\u0648\u0644\u0649, \u0639\u0646\u062f\u0645\u0627 \u062a\u0642\u0648\u0645 \u0628\u062a\u0634\u063a\u064a\u0644 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c,\n\u0647\u0630\u0647 \u0627\u0644\u062f\u0627\u0644\u0629 \u0633\u0648\u0641 \u062a\u0628\u062f\u0623 \u0628\u0627\u0644\u0639\u0645\u0644 \u0639\u0644\u0649 \u0627\u0633\u062a\u062f\u0639\u0627\u0621 \u062f\u0627\u0644\u0629 read_text .      def see_me_that_in_phone():\n              x = read_text()  \u062f\u0639\u0648\u0646\u0627 \u0646\u0628\u062f\u0623 ;)      see_me_that_in_phone()", 
            "title": "(Twilio + Profanity) Arabic version"
        }, 
        {
            "location": "/Twilio + Profanity/(Twilio + Profanity) English version/", 
            "text": "(Twilio + Profanity) English version\n\n\nadded by @Modydj\nPython 2.7\n2 in 1 (Twilio + Profanity Editor)\n\n\nMechanism of Action:\n\n\n\n\nI will create def call: see_me_that_in_phone\n\n\n\n\n2 - I will make it back to the functions (check_profainty, read_text)\n\n\n3 - Finally, I will receive on my mobile only the result if the message contains the words undesirable or not\n\n\nWell, Let's start:\n\n\nimport the appropriate libraries in the first\n\n\n    import urllib\n    from twilio.rest import Client\n\n\n\nWrite two def to check from our work,\nThe first one is read_text, which will read your target file.\n\n\n    def read_text():\n        quotes = open(r'C:\\Users\\Desktop\\movie_quotes.txt','r')# Let's change this address according to your destination\n        contents_of_file = quotes.read()\n        #print (contents_of_file)\n        quotes.close()\n        check_profanity(contents_of_file)\n\n\n\nThe second one is check profanity , which will take the order after knowing\nthe result by using read_text def.\n\n\n    def check_profanity(text_to_check):\n        account_sid = \"ACdXXXXXXXXXXXXXXXX\" #Enter your twilio account_sid\n        auth_token = \"3bXXXXXXXXXXXXXXXXX\" # Enter your twilio account_token\n        client = Client(account_sid, auth_token)\n        connection = urllib.urlopen(\"http://www.wdylike.appspot.com/?q=\" + text_to_check)\n        output= connection.read()\n        #print (output)\n        connection.close()\n\n        if \"true\" in output:\n            message = client.messages.create(\n                body=\"profainty Alert!\",\n                to=\"+213xxxxxxxx\", # put your number phone\n                from_=\"+143xxxxxxx\")# put your number phone on Twilio\n            print(message.sid)\n\n        elif \"false\" in output:\n            message = client.messages.create(\n                body=\"This document has no curse words!\",\n                to=\"+213xxxxxxxx\",# put your number phone\n                from_=\"+143xxxxxxx\")# put your number phone on Twilio\n            print(message.sid)\n\n        else:\n            message = client.messages.create(\n                body=\"Could not scan the document properly.\",\n                to=\"+213xxxxxxxx\",# put your number phone\n                from_=\"+143xxxxxxx\")# put your number phone on Twilio\n            print(message.sid)\n\n\n\nThe last step, but in fact, this is the first step, when you run this program,\nThis def will start in the begging to summon read_text def.\n\n\n    def see_me_that_in_phone():\n              x = read_text()\n\n\n\nAnd here we go ;)\n\n\n    see_me_that_in_phone()", 
            "title": "(Twilio + Profanity) English version"
        }, 
        {
            "location": "/Twilio + Profanity/(Twilio + Profanity) English version/#twilio-profanity-english-version", 
            "text": "added by @Modydj\nPython 2.7\n2 in 1 (Twilio + Profanity Editor)  Mechanism of Action:   I will create def call: see_me_that_in_phone   2 - I will make it back to the functions (check_profainty, read_text)  3 - Finally, I will receive on my mobile only the result if the message contains the words undesirable or not  Well, Let's start:  import the appropriate libraries in the first      import urllib\n    from twilio.rest import Client  Write two def to check from our work,\nThe first one is read_text, which will read your target file.      def read_text():\n        quotes = open(r'C:\\Users\\Desktop\\movie_quotes.txt','r')# Let's change this address according to your destination\n        contents_of_file = quotes.read()\n        #print (contents_of_file)\n        quotes.close()\n        check_profanity(contents_of_file)  The second one is check profanity , which will take the order after knowing\nthe result by using read_text def.      def check_profanity(text_to_check):\n        account_sid = \"ACdXXXXXXXXXXXXXXXX\" #Enter your twilio account_sid\n        auth_token = \"3bXXXXXXXXXXXXXXXXX\" # Enter your twilio account_token\n        client = Client(account_sid, auth_token)\n        connection = urllib.urlopen(\"http://www.wdylike.appspot.com/?q=\" + text_to_check)\n        output= connection.read()\n        #print (output)\n        connection.close()\n\n        if \"true\" in output:\n            message = client.messages.create(\n                body=\"profainty Alert!\",\n                to=\"+213xxxxxxxx\", # put your number phone\n                from_=\"+143xxxxxxx\")# put your number phone on Twilio\n            print(message.sid)\n\n        elif \"false\" in output:\n            message = client.messages.create(\n                body=\"This document has no curse words!\",\n                to=\"+213xxxxxxxx\",# put your number phone\n                from_=\"+143xxxxxxx\")# put your number phone on Twilio\n            print(message.sid)\n\n        else:\n            message = client.messages.create(\n                body=\"Could not scan the document properly.\",\n                to=\"+213xxxxxxxx\",# put your number phone\n                from_=\"+143xxxxxxx\")# put your number phone on Twilio\n            print(message.sid)  The last step, but in fact, this is the first step, when you run this program,\nThis def will start in the begging to summon read_text def.      def see_me_that_in_phone():\n              x = read_text()  And here we go ;)      see_me_that_in_phone()", 
            "title": "(Twilio + Profanity) English version"
        }, 
        {
            "location": "/Twilio + Profanity/(Twilio + Profanity) French version/", 
            "text": "(Twilio + Profanity) French version\n\n\najout\u00e9 par @Modydj\nPython 2.7\n2 en 1 ( Twilio + Profanity \u00c9diteur)\n\n\nM\u00e9canisme d'action:\n\n\n\n\nJe vais cr\u00e9er def appel: see_me_that_in_phone\n\n\n\n\n2 - Je vais revenir aux fonctions: (check_profainty, read_text)\n\n\n3 - Enfin, je recevrai sur mon portable  le r\u00e9sultat si le message contient les mots ind\u00e9sirables ou non\n\n\nBien, On y va ;)\n\n\nimporter les biblioth\u00e8ques appropri\u00e9es dans le premier\n\n\n    import urllib\n    from twilio.rest import Client\n\n\n\nEcrire deux def pour v\u00e9rifier de notre travail,\nLe premier est read_text, qui lira votre fichier cible.\n\n\n    def read_text():\n        quotes = open(r'C:\\Users\\Desktop\\movie_quotes.txt','r')# Changeons cette adresse en fonction de votre destination\n        contents_of_file = quotes.read()\n        #print (contents_of_file)\n        quotes.close()\n        check_profanity(contents_of_file)\n\n\n\nLe second est de v\u00e9rifier check_profanity, qui prendra l'ordre apr\u00e8s avoir connu\nle r\u00e9sultat en utilisant read_text def.\n\n\n    def check_profanity(text_to_check):\n        account_sid = \"ACdXXXXXXXXXXXXXXXX\" # Entrez votre twilio account_sid\n        auth_token = \"3bXXXXXXXXXXXXXXXXX\" # Entrez votre twilio account_token\n        client = Client(account_sid, auth_token)\n        connection = urllib.urlopen(\"http://www.wdylike.appspot.com/?q=\" + text_to_check)\n        output= connection.read()\n        #print (output)\n        connection.close()\n\n        if \"true\" in output:\n            message = client.messages.create(\n                body=\"profainty Alert!\",\n                to=\"+213xxxxxxxx\", # mettez votre num\u00e9ro de t\u00e9l\u00e9phone\n                from_=\"+143xxxxxxx\")# mettez votre num\u00e9ro de t\u00e9l\u00e9phone sur Twilio\n            print(message.sid)\n\n        elif \"false\" in output:\n            message = client.messages.create(\n                body=\"This document has no curse words!\",\n                to=\"+213xxxxxxxx\",# mettez votre num\u00e9ro de t\u00e9l\u00e9phone\n                from_=\"+143xxxxxxx\")# mettez votre num\u00e9ro de t\u00e9l\u00e9phone sur Twilio\n            print(message.sid)\n\n        else:\n            message = client.messages.create(\n                body=\"Could not scan the document properly.\",\n                to=\"+213xxxxxxxx\",# mettez votre num\u00e9ro de t\u00e9l\u00e9phone\n                from_=\"+143xxxxxxx\")# mettez votre num\u00e9ro de t\u00e9l\u00e9phone sur Twilio\n            print(message.sid)\n\n\n\nLa derni\u00e8re \u00e9tape, mais en fait, c'est la premi\u00e8re \u00e9tape, lorsque vous ex\u00e9cutez ce programme,\nCette def commencera dans le begging pour invoquer read_text def.\n\n\n    def see_me_that_in_phone():\n              x = read_text()\n\n\n\nEt c'est parti ;)\n\n\n    see_me_that_in_phone()", 
            "title": "(Twilio + Profanity) French version"
        }, 
        {
            "location": "/Twilio + Profanity/(Twilio + Profanity) French version/#twilio-profanity-french-version", 
            "text": "ajout\u00e9 par @Modydj\nPython 2.7\n2 en 1 ( Twilio + Profanity \u00c9diteur)  M\u00e9canisme d'action:   Je vais cr\u00e9er def appel: see_me_that_in_phone   2 - Je vais revenir aux fonctions: (check_profainty, read_text)  3 - Enfin, je recevrai sur mon portable  le r\u00e9sultat si le message contient les mots ind\u00e9sirables ou non  Bien, On y va ;)  importer les biblioth\u00e8ques appropri\u00e9es dans le premier      import urllib\n    from twilio.rest import Client  Ecrire deux def pour v\u00e9rifier de notre travail,\nLe premier est read_text, qui lira votre fichier cible.      def read_text():\n        quotes = open(r'C:\\Users\\Desktop\\movie_quotes.txt','r')# Changeons cette adresse en fonction de votre destination\n        contents_of_file = quotes.read()\n        #print (contents_of_file)\n        quotes.close()\n        check_profanity(contents_of_file)  Le second est de v\u00e9rifier check_profanity, qui prendra l'ordre apr\u00e8s avoir connu\nle r\u00e9sultat en utilisant read_text def.      def check_profanity(text_to_check):\n        account_sid = \"ACdXXXXXXXXXXXXXXXX\" # Entrez votre twilio account_sid\n        auth_token = \"3bXXXXXXXXXXXXXXXXX\" # Entrez votre twilio account_token\n        client = Client(account_sid, auth_token)\n        connection = urllib.urlopen(\"http://www.wdylike.appspot.com/?q=\" + text_to_check)\n        output= connection.read()\n        #print (output)\n        connection.close()\n\n        if \"true\" in output:\n            message = client.messages.create(\n                body=\"profainty Alert!\",\n                to=\"+213xxxxxxxx\", # mettez votre num\u00e9ro de t\u00e9l\u00e9phone\n                from_=\"+143xxxxxxx\")# mettez votre num\u00e9ro de t\u00e9l\u00e9phone sur Twilio\n            print(message.sid)\n\n        elif \"false\" in output:\n            message = client.messages.create(\n                body=\"This document has no curse words!\",\n                to=\"+213xxxxxxxx\",# mettez votre num\u00e9ro de t\u00e9l\u00e9phone\n                from_=\"+143xxxxxxx\")# mettez votre num\u00e9ro de t\u00e9l\u00e9phone sur Twilio\n            print(message.sid)\n\n        else:\n            message = client.messages.create(\n                body=\"Could not scan the document properly.\",\n                to=\"+213xxxxxxxx\",# mettez votre num\u00e9ro de t\u00e9l\u00e9phone\n                from_=\"+143xxxxxxx\")# mettez votre num\u00e9ro de t\u00e9l\u00e9phone sur Twilio\n            print(message.sid)  La derni\u00e8re \u00e9tape, mais en fait, c'est la premi\u00e8re \u00e9tape, lorsque vous ex\u00e9cutez ce programme,\nCette def commencera dans le begging pour invoquer read_text def.      def see_me_that_in_phone():\n              x = read_text()  Et c'est parti ;)      see_me_that_in_phone()", 
            "title": "(Twilio + Profanity) French version"
        }, 
        {
            "location": "/definitions/Data_Types_en/", 
            "text": "Data_Types_en\n\n\nwhat is python\n\n\nadded by @Dima\n\n\n    print(\"What is Data Types?\")\n\n    print(\"_______________________________________________________\")\n\n\n    print(\"Collections of data put together like array \")\n\n    print(\"________________________________________________________\")\n\n    print(\"there are four data types in the Python \")\n\n    print(\"________________________________________________________\")\n\n    print(\"\"\"1)--List is a collection which is ordered and changeable.\n          Allows duplicate members.\"\"\")\n    print(\"________________________________________________________\")\n\n    print(\"\"\"2)--Tuple is a collection which is ordered and unchangeable\n           Allows duplicate members.\"\"\")\n    print(\"________________________________________________________\")\n\n    print(\"\"\"3)--Set is a collection which is unordered and unindexed.\n           No duplicate members.\"\"\")\n    print(\"________________________________________________________\")\n\n    print(\"\"\"4)--Dictionary is a collection which is unordered,.\"\"\")\n\n\n\n    input(\"press close to exit\")", 
            "title": "Data_Types_en"
        }, 
        {
            "location": "/definitions/Data_Types_en/#data_types_en", 
            "text": "what is python  added by @Dima      print(\"What is Data Types?\")\n\n    print(\"_______________________________________________________\")\n\n\n    print(\"Collections of data put together like array \")\n\n    print(\"________________________________________________________\")\n\n    print(\"there are four data types in the Python \")\n\n    print(\"________________________________________________________\")\n\n    print(\"\"\"1)--List is a collection which is ordered and changeable.\n          Allows duplicate members.\"\"\")\n    print(\"________________________________________________________\")\n\n    print(\"\"\"2)--Tuple is a collection which is ordered and unchangeable\n           Allows duplicate members.\"\"\")\n    print(\"________________________________________________________\")\n\n    print(\"\"\"3)--Set is a collection which is unordered and unindexed.\n           No duplicate members.\"\"\")\n    print(\"________________________________________________________\")\n\n    print(\"\"\"4)--Dictionary is a collection which is unordered,.\"\"\")\n\n\n\n    input(\"press close to exit\")", 
            "title": "Data_Types_en"
        }, 
        {
            "location": "/definitions/Function_Def_en/", 
            "text": "Function_Def_en\n\n\n    from __future__ import print_function\n\n\n\nwhat is Functions\n\n\nadded by @Dima\n\n\n    print(\"What is Functions?\")\n\n    print(\"_______________________________________________________\")\n\n\n    print(\"\"\" A function is a block of organized,\n    reusable code that is used to perform a single,\n    related action. Functions provide better\n    modularity for your application and a high\n    degree of code reusing\"\"\")\n\n    print(\"________________________________________________________\")\n\n    input(\"press close to exit\")", 
            "title": "Function_Def_en"
        }, 
        {
            "location": "/definitions/Function_Def_en/#function_def_en", 
            "text": "from __future__ import print_function  what is Functions  added by @Dima      print(\"What is Functions?\")\n\n    print(\"_______________________________________________________\")\n\n\n    print(\"\"\" A function is a block of organized,\n    reusable code that is used to perform a single,\n    related action. Functions provide better\n    modularity for your application and a high\n    degree of code reusing\"\"\")\n\n    print(\"________________________________________________________\")\n\n    input(\"press close to exit\")", 
            "title": "Function_Def_en"
        }, 
        {
            "location": "/definitions/OOP_Def_en/", 
            "text": "OOP_Def_en\n\n\n    from __future__ import print_function\n\n\n\nwhat is python\n\n\nadded by @Dima\n\n\n    print(\"What is OOP?\")\n\n    print(\"_______________________________________________________\")\n\n\n    print(\"\"\" combining data and functionality\n    and wrap it inside something called an object.\n    This is called the object oriented programming\n    paradigm. Most of the time you can use procedural\n    programming, but when writing large programs or have\n    a problem that is better suited to this method, you\n    can use object oriented programming techniques.\"\"\")\n\n    print(\"________________________________________________________\")\n\n    print(\"***Classes***\")\n\n    print(\"_______________________________________________________\")\n\n\n    print(\"\"\" A user-defined prototype for an object\n    that defines a set of attributes that characterize\n    any object of the class.\"\"\")\n\n    print(\"________________________________________________________\")\n\n    print(\"***objects****\")\n\n    print(\"_______________________________________________________\")\n\n\n    print(\"\"\"objects are instances of the class\"\"\")\n\n    print(\"________________________________________________________\")\n\n    print(\"**methods***\")\n\n    print(\"_______________________________________________________\")\n\n\n    print(\"\"\"its a function, except that we have an extra self variable\"\"\")\n\n    print(\"________________________________________________________\")\n\n    print(\"***Inheritance***\")\n\n    print(\"_______________________________________________________\")\n\n\n    print(\"\"\"its a mechanism to reuse of code.\n    Inheritance can be best imagined as implementing\n    a type and subtype relationship between classes.\"\"\")\n\n    print(\"________________________________________________________\")\n\n\n    input(\"press close to exit\")", 
            "title": "OOP_Def_en"
        }, 
        {
            "location": "/definitions/OOP_Def_en/#oop_def_en", 
            "text": "from __future__ import print_function  what is python  added by @Dima      print(\"What is OOP?\")\n\n    print(\"_______________________________________________________\")\n\n\n    print(\"\"\" combining data and functionality\n    and wrap it inside something called an object.\n    This is called the object oriented programming\n    paradigm. Most of the time you can use procedural\n    programming, but when writing large programs or have\n    a problem that is better suited to this method, you\n    can use object oriented programming techniques.\"\"\")\n\n    print(\"________________________________________________________\")\n\n    print(\"***Classes***\")\n\n    print(\"_______________________________________________________\")\n\n\n    print(\"\"\" A user-defined prototype for an object\n    that defines a set of attributes that characterize\n    any object of the class.\"\"\")\n\n    print(\"________________________________________________________\")\n\n    print(\"***objects****\")\n\n    print(\"_______________________________________________________\")\n\n\n    print(\"\"\"objects are instances of the class\"\"\")\n\n    print(\"________________________________________________________\")\n\n    print(\"**methods***\")\n\n    print(\"_______________________________________________________\")\n\n\n    print(\"\"\"its a function, except that we have an extra self variable\"\"\")\n\n    print(\"________________________________________________________\")\n\n    print(\"***Inheritance***\")\n\n    print(\"_______________________________________________________\")\n\n\n    print(\"\"\"its a mechanism to reuse of code.\n    Inheritance can be best imagined as implementing\n    a type and subtype relationship between classes.\"\"\")\n\n    print(\"________________________________________________________\")\n\n\n    input(\"press close to exit\")", 
            "title": "OOP_Def_en"
        }, 
        {
            "location": "/definitions/Python_Def_en/", 
            "text": "Python_Def_en\n\n\n    from __future__ import print_function\n\n\n\nwhat is python\n\n\nadded by @Dima\n\n\n    print(\"What is Python?\")\n\n    print(\"_______________________________________________________\")\n\n\n    print(\"\"\" In technical terms,\n          Python is an object-oriented,\n          high-level programming language\n          with integrated dynamic\n          semantics primarily\n          for web and app development.\n          It is extremely attractive in the field of Rapid\n          Application Development\n          because it offers dynamic\n          typing and dynamic binding options\"\"\")\n\n    print(\"________________________________________________________\")\n\n    input(\"press close to exit\")", 
            "title": "Python_Def_en"
        }, 
        {
            "location": "/definitions/Python_Def_en/#python_def_en", 
            "text": "from __future__ import print_function  what is python  added by @Dima      print(\"What is Python?\")\n\n    print(\"_______________________________________________________\")\n\n\n    print(\"\"\" In technical terms,\n          Python is an object-oriented,\n          high-level programming language\n          with integrated dynamic\n          semantics primarily\n          for web and app development.\n          It is extremely attractive in the field of Rapid\n          Application Development\n          because it offers dynamic\n          typing and dynamic binding options\"\"\")\n\n    print(\"________________________________________________________\")\n\n    input(\"press close to exit\")", 
            "title": "Python_Def_en"
        }, 
        {
            "location": "/python_bacics_101/Arithemtic_operators_en/", 
            "text": "Arithemtic_operators_en\n\n\nExamples on how to uses Python Arithmetic Operators\n\n\nWhat is the operator in Python?\nOperators are special symbols in Python that carry out arithmetic or logical computation.\nThe value that the operator operates on is called the operand.\nfor example: 2 + 3 = 5 \nHere, + is the operator that performs addition.\n2 and 3 are the operands and 5 is the output of the operation.\n\n\nwhat is Arithmetic Operators means ? \n    Operator        | Description\n    -----------------------------------------------\n    + Addition      | Adds values on either side of the operator.\n    - Subtraction       | Subtracts right hand operand from left hand operand.\n    * Multiplication    | Multiplies values on either side of the operator \n    / Division      | Divides left hand operand by right hand operand \n    % Modulus       | Divides left hand operand by right hand operand and returns remainder\n    ** Exponent     | Performs exponential (power) calculation on operators\n    // Floor Division   | he division of operands where the result is the quotient in which the digits after the decimal point are removed. But if one of the operands is negative, the result is floored, i.e., rounded away from zero\n\n\nwhen do we use it ? \nwe use this kind of every where form basic math operation to loops or condition statements \n''' \nfrom \nfuture\n import print_function\na = 20 ; b = 10\n\n\nAddition operator\n\n\nc = a + b\nprint(\"Addition value =\" , c)\n\n\nSubtraction operator\n\n\nc = a - b\nprint(\"Subtraction value = \" , c)\n\n\nMultipliction operator\n\n\nc = a * b\nprint(\"Multipliction value = \" , c)\n\n\nDivision operator\n\n\nc = a / b\nprint(\"Division value = \" , c)\n\n\nMod operator\n\n\nc = a % b\nprint(\"Mod value = \" , c)\n\n\nExponent or power operator\n\n\na = 2 ; b = 3 \nc = a ** b\nprint(\"Exponent value = \" , c)\n\n\nfloor Division or integer division operator\n\n\n    Note : \n    In Python 3 the division of 5 / 2 will return 2.5 this is floating point division \n    the floor Division or integer divisio will return 2 mean return only the integer value\n\n\n\na = 9 ; b = 4 \nc = a // b \nprint(\"Integer Division value = \" , c)", 
            "title": "Arithemtic_operators_en"
        }, 
        {
            "location": "/python_bacics_101/Arithemtic_operators_en/#arithemtic_operators_en", 
            "text": "Examples on how to uses Python Arithmetic Operators  What is the operator in Python?\nOperators are special symbols in Python that carry out arithmetic or logical computation.\nThe value that the operator operates on is called the operand.\nfor example: 2 + 3 = 5 \nHere, + is the operator that performs addition.\n2 and 3 are the operands and 5 is the output of the operation.  what is Arithmetic Operators means ? \n    Operator        | Description\n    -----------------------------------------------\n    + Addition      | Adds values on either side of the operator.\n    - Subtraction       | Subtracts right hand operand from left hand operand.\n    * Multiplication    | Multiplies values on either side of the operator \n    / Division      | Divides left hand operand by right hand operand \n    % Modulus       | Divides left hand operand by right hand operand and returns remainder\n    ** Exponent     | Performs exponential (power) calculation on operators\n    // Floor Division   | he division of operands where the result is the quotient in which the digits after the decimal point are removed. But if one of the operands is negative, the result is floored, i.e., rounded away from zero  when do we use it ? \nwe use this kind of every where form basic math operation to loops or condition statements \n''' \nfrom  future  import print_function\na = 20 ; b = 10", 
            "title": "Arithemtic_operators_en"
        }, 
        {
            "location": "/python_bacics_101/Arithemtic_operators_en/#addition-operator", 
            "text": "c = a + b\nprint(\"Addition value =\" , c)", 
            "title": "Addition operator"
        }, 
        {
            "location": "/python_bacics_101/Arithemtic_operators_en/#subtraction-operator", 
            "text": "c = a - b\nprint(\"Subtraction value = \" , c)", 
            "title": "Subtraction operator"
        }, 
        {
            "location": "/python_bacics_101/Arithemtic_operators_en/#multipliction-operator", 
            "text": "c = a * b\nprint(\"Multipliction value = \" , c)", 
            "title": "Multipliction operator"
        }, 
        {
            "location": "/python_bacics_101/Arithemtic_operators_en/#division-operator", 
            "text": "c = a / b\nprint(\"Division value = \" , c)", 
            "title": "Division operator"
        }, 
        {
            "location": "/python_bacics_101/Arithemtic_operators_en/#mod-operator", 
            "text": "c = a % b\nprint(\"Mod value = \" , c)", 
            "title": "Mod operator"
        }, 
        {
            "location": "/python_bacics_101/Arithemtic_operators_en/#exponent-or-power-operator", 
            "text": "a = 2 ; b = 3 \nc = a ** b\nprint(\"Exponent value = \" , c)", 
            "title": "Exponent or power operator"
        }, 
        {
            "location": "/python_bacics_101/Arithemtic_operators_en/#floor-division-or-integer-division-operator", 
            "text": "Note : \n    In Python 3 the division of 5 / 2 will return 2.5 this is floating point division \n    the floor Division or integer divisio will return 2 mean return only the integer value  a = 9 ; b = 4 \nc = a // b \nprint(\"Integer Division value = \" , c)", 
            "title": "floor Division or integer division operator"
        }, 
        {
            "location": "/python_bacics_101/Assignment_operators_en/", 
            "text": "Assignment_operators_en\n\n\nExamples on how to uses python Assignments operators\n\n\nAssignment operators means:\nadding a new value to variable , ike increase value / decrease / multiply and more\n\n\n    Operator    | Description\n------------------------------------------\n= equal         | Assigns values from right side operands to left side operand for example: a = 10 or c = a + b assigns value of a + b into c\n+= Add AND      | It adds right operand to the left operand and assign the result to left operand\n-= Subtract AND     | It subtracts right operand from the left operand and assign the result to left operand\n*= Multiply AND     | It multiplies right operand with the left operand and assign the result to left operand\n/= Divide AND       | It divides left operand with the right operand and assign the result to left operand\n%= Modulus AND      | It takes modulus using two operands and assign the result to left operand\n**= Exponent AND    | Performs exponential (power) calculation on operators and assign value to the left operand\n//= Floor Division  | It performs floor division on operators and assign value to the left operand\n\n\n\nwhen do we use it ? \nwe usually use this kind of assignments in loops or condition statements\n''' \nfrom \nfuture\n import print_function\n\n\na = 2 ; b = 1 ; c = 0\nprint(\"values = \", \"a=\" , a , \"b=\" ,  b , \"c=\" , c) \n\n\nAddition or Subtraction c = c + a / c = c - b\n\n\nc += a\nprint(\"Add c value by a =\" , c)\nc -= b\nprint(\"Subtract c value by b =\" , c)\n\n\nmultiply c = c * a\n\n\nc *= a\nprint(\"multiply c value by a =\" , c)\n\n\nDivide  c = c / a\n\n\nc /= a\nprint(\"Divide c value by a = \" , c)\n\n\nMod of dividing c by a , c = c % a\n\n\nc  %= a \nprint(\"Mod c value by a = \" , c)\n\n\nExponent or power c by a , c = c ** a\n\n\nc **= a\nprint(\"power c value by = \" , c)\n\n\nfloor Division or integer division c = c // a\n\n\nc //= a\nprint(\"Integer Division c value by a = \" , c)", 
            "title": "Assignment_operators_en"
        }, 
        {
            "location": "/python_bacics_101/Assignment_operators_en/#assignment_operators_en", 
            "text": "Examples on how to uses python Assignments operators  Assignment operators means:\nadding a new value to variable , ike increase value / decrease / multiply and more      Operator    | Description\n------------------------------------------\n= equal         | Assigns values from right side operands to left side operand for example: a = 10 or c = a + b assigns value of a + b into c\n+= Add AND      | It adds right operand to the left operand and assign the result to left operand\n-= Subtract AND     | It subtracts right operand from the left operand and assign the result to left operand\n*= Multiply AND     | It multiplies right operand with the left operand and assign the result to left operand\n/= Divide AND       | It divides left operand with the right operand and assign the result to left operand\n%= Modulus AND      | It takes modulus using two operands and assign the result to left operand\n**= Exponent AND    | Performs exponential (power) calculation on operators and assign value to the left operand\n//= Floor Division  | It performs floor division on operators and assign value to the left operand  when do we use it ? \nwe usually use this kind of assignments in loops or condition statements\n''' \nfrom  future  import print_function  a = 2 ; b = 1 ; c = 0\nprint(\"values = \", \"a=\" , a , \"b=\" ,  b , \"c=\" , c)", 
            "title": "Assignment_operators_en"
        }, 
        {
            "location": "/python_bacics_101/Assignment_operators_en/#addition-or-subtraction-c-c-a-c-c-b", 
            "text": "c += a\nprint(\"Add c value by a =\" , c)\nc -= b\nprint(\"Subtract c value by b =\" , c)", 
            "title": "Addition or Subtraction c = c + a / c = c - b"
        }, 
        {
            "location": "/python_bacics_101/Assignment_operators_en/#multiply-c-c-a", 
            "text": "c *= a\nprint(\"multiply c value by a =\" , c)", 
            "title": "multiply c = c * a"
        }, 
        {
            "location": "/python_bacics_101/Assignment_operators_en/#divide-c-c-a", 
            "text": "c /= a\nprint(\"Divide c value by a = \" , c)", 
            "title": "Divide  c = c / a"
        }, 
        {
            "location": "/python_bacics_101/Assignment_operators_en/#mod-of-dividing-c-by-a-c-c-a", 
            "text": "c  %= a \nprint(\"Mod c value by a = \" , c)", 
            "title": "Mod of dividing c by a , c = c % a"
        }, 
        {
            "location": "/python_bacics_101/Assignment_operators_en/#exponent-or-power-c-by-a-c-c-a", 
            "text": "c **= a\nprint(\"power c value by = \" , c)", 
            "title": "Exponent or power c by a , c = c ** a"
        }, 
        {
            "location": "/python_bacics_101/Assignment_operators_en/#floor-division-or-integer-division-c-c-a", 
            "text": "c //= a\nprint(\"Integer Division c value by a = \" , c)", 
            "title": "floor Division or integer division c = c // a"
        }, 
        {
            "location": "/python_bacics_101/Comparison_operators_en/", 
            "text": "Comparison_operators_en\n\n\nExamples on how to uses Python Comparison Operators\n\n\nwhat is comparison Operators means?\nThese operators compare the values on either sides of them and decide the relation among them. They are also called Relational operators.\n\n\n    Operator    | Description\n------------------------------------------\n== equal        | If the values of two operands are equal, then the condition becomes true. a == c that means that both variables have equal value.\n!= or \n not equal  | If values of two operands are not equal, then condition becomes true.\n\n greater than      | If the value of left operand is greater than the value of right operand, then condition becomes true.\n\n less than     | If the value of left operand is less than the value of right operand, then condition becomes true.\n\n= greater or equal | If the value of left operand is greater than or equal to the value of right operand, then condition becomes true.\n\n= less or equal    | If the value of left operand is less than or equal to the value of right operand, then condition becomes true.\n\n\n\nwhen do we use it ? \nwe use this kind of operators with condition statements or in loops conditions\n''' \nfrom \nfuture\n import print_function\na = 10 ; b = 10\n\n\nequal\n\n\nif a == b :\n    print(\"a is equal to b\")\n\n\nnot equal\n\n\nfor this to work we will increase the value of a by 10 by using Assignment operator\n\n\na += 10\nprint(\"a=\" , a)\nif a != b :\n    print(\"a is not equal to b\") \n\n\ngreater than\n\n\nif a \n b :\n    print(\"a is greater than b\")\n\n\nless than\n\n\nif b \n a :\n    print(\"b is less than a\")\n\n\ngreater or equal\n\n\nif a \n= b :\n    print(\"a is either greater or equal to b\")\n\n\nless or equal\n\n\nif b \n= a :\n    print(\"b is either less or equal to a\")", 
            "title": "Comparison_operators_en"
        }, 
        {
            "location": "/python_bacics_101/Comparison_operators_en/#comparison_operators_en", 
            "text": "Examples on how to uses Python Comparison Operators  what is comparison Operators means?\nThese operators compare the values on either sides of them and decide the relation among them. They are also called Relational operators.      Operator    | Description\n------------------------------------------\n== equal        | If the values of two operands are equal, then the condition becomes true. a == c that means that both variables have equal value.\n!= or   not equal  | If values of two operands are not equal, then condition becomes true.  greater than      | If the value of left operand is greater than the value of right operand, then condition becomes true.  less than     | If the value of left operand is less than the value of right operand, then condition becomes true. = greater or equal | If the value of left operand is greater than or equal to the value of right operand, then condition becomes true. = less or equal    | If the value of left operand is less than or equal to the value of right operand, then condition becomes true.  when do we use it ? \nwe use this kind of operators with condition statements or in loops conditions\n''' \nfrom  future  import print_function\na = 10 ; b = 10", 
            "title": "Comparison_operators_en"
        }, 
        {
            "location": "/python_bacics_101/Comparison_operators_en/#equal", 
            "text": "if a == b :\n    print(\"a is equal to b\")", 
            "title": "equal"
        }, 
        {
            "location": "/python_bacics_101/Comparison_operators_en/#not-equal", 
            "text": "", 
            "title": "not equal"
        }, 
        {
            "location": "/python_bacics_101/Comparison_operators_en/#for-this-to-work-we-will-increase-the-value-of-a-by-10-by-using-assignment-operator", 
            "text": "a += 10\nprint(\"a=\" , a)\nif a != b :\n    print(\"a is not equal to b\")", 
            "title": "for this to work we will increase the value of a by 10 by using Assignment operator"
        }, 
        {
            "location": "/python_bacics_101/Comparison_operators_en/#greater-than", 
            "text": "if a   b :\n    print(\"a is greater than b\")", 
            "title": "greater than"
        }, 
        {
            "location": "/python_bacics_101/Comparison_operators_en/#less-than", 
            "text": "if b   a :\n    print(\"b is less than a\")", 
            "title": "less than"
        }, 
        {
            "location": "/python_bacics_101/Comparison_operators_en/#greater-or-equal", 
            "text": "if a  = b :\n    print(\"a is either greater or equal to b\")", 
            "title": "greater or equal"
        }, 
        {
            "location": "/python_bacics_101/Comparison_operators_en/#less-or-equal", 
            "text": "if b  = a :\n    print(\"b is either less or equal to a\")", 
            "title": "less or equal"
        }, 
        {
            "location": "/python_bacics_101/Datatype_convertion_en/", 
            "text": "Datatype_convertion_en\n\n\nDataType Conversions\n\n\nConverting int to float\n\n\n    i = 10\n    print i\n    print type(i)\n    print type(float(i))\n\n\n\nConverting float to int\n\n\n    i = 10.31\n    print i\n    print type(i)\n    print type(int(i))\n\n\n\nConverting string to int\n\n\n    s = \"123\"\n    print s\n    print type(s)\n    print type(int(s))\n\n\n\nConverting number to string\n\n\n    s = 123\n    print s\n    print type(s)\n    print type(str(s))", 
            "title": "Datatype_convertion_en"
        }, 
        {
            "location": "/python_bacics_101/Datatype_convertion_en/#datatype_convertion_en", 
            "text": "DataType Conversions  Converting int to float      i = 10\n    print i\n    print type(i)\n    print type(float(i))  Converting float to int      i = 10.31\n    print i\n    print type(i)\n    print type(int(i))  Converting string to int      s = \"123\"\n    print s\n    print type(s)\n    print type(int(s))  Converting number to string      s = 123\n    print s\n    print type(s)\n    print type(str(s))", 
            "title": "Datatype_convertion_en"
        }
    ]
}